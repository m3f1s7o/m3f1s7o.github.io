 [
        
        {
            "categories": ["programacion"],
            "content": "IP ValidationEnlace al KataResumenEn este Kata lo que tenemos que hacer es comprobar el correcto formato de direcciones IPv4. Simplemente eso.Instrucciones (traducidas)Escribe un algoritmo que identifique direcciones IPv4 v√°lidas en formato punto decimal. Las IPs ser√°n consideradas v√°lidas si consisten de cuatro octetos, con valores entre 0 y 255.Ejemplos de entradas v√°lidas123Examples of valid inputs:1.2.3.4123.45.67.89Ejemplo de entradas no v√°lidas12341.2.31.2.3.4.5123.456.78.90123.045.067.089Notas  Ceros al principio (ej.¬†01.02.03.04) son considerados inv√°lidos  Se garantiza que la entradas es una s√≥la cadenaSolucionesMi soluci√≥nEn esta soluci√≥n no pondr√© algoritmo porque es un enfoque muy lineal, una condicional para cada requisito, si se cumple pasa a la siguiente condicional, sino termina el programa con un False, si el programa llega al final termina con un True.C√≥digo1234567891011121314151617adr=\"$1\"re=\"^[0-9.]+$\"! [[ $adr =~ $re ]] &amp;&amp; echo \"False\" &amp;&amp; exit  # s√≥lo n√∫meros y puntosIFS=\".\" read -ra octet &lt;&lt;&lt; \"$adr\"  # separar por puntos[[ ${#octet[@]} -ne 4 ]] &amp;&amp; echo \"False\" &amp;&amp; exit  # 4 octetosfor oct in ${octet[@]}; do  ! [[ ${#oct} -le 3 ]] &amp;&amp; echo \"False\" &amp;&amp; exit  # 3 o menos digitos en cada octeto  ! [[ $oct -ge 0 &amp;&amp; $oct -le 255 ]] &amp;&amp; echo \"False\" &amp;&amp; exit  # rango de 0 a 255   [[ $oct =~ ^0[1-9]+$ ]] &amp;&amp; echo \"False\" &amp;&amp; exit  # ceros al principiodoneecho \"True\"Es una soluci√≥n sencilla y f√°cil de entender, utilic√© la sint√°xis que aprend√≠ en la soluci√≥n del anterior Kata para hacer las verificaciones necesarias, y lo combin√© con expresiones regulares (regex).Sin embargo, viendo otras soluciones, encontr√© maneras de hacer el problema en menos l√≠neas.Otras solucionesLa m√°s cortaEsta soluci√≥n fue hecha por el usuario zimo, tiene un enfoque m√°s directo, y aunque parece complicada de entender, si la separas por partes es f√°cil comprender.1echo \"$1\" | egrep -q \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\" &amp;&amp; echo \"True\" || echo \"False\"B√°sicamente lo que hace esta soluci√≥n es:  Pasar la cadena de la IP ($1) a egrep (tambi√©n es posible grep -E) para que busque el patr√≥n entre comillas de manera silenciosa (-q).  Se busca el patr√≥n ([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.) al inicio de la cadena, lo que hace coincidir a las siguientes cadenas:          de un digito con rango del 0 al 9 √≥ ([0-9]|)      de dos digitos con rango de 10 al 99 √≥ ([1-9][0-9]|)      de tres digitos del 100 al 199 √≥ (1[0-9]{2}|)      de tres digitos del 200 al 249 √≥ (2[0-4][0-9]|)      de tres digitos del 250 al 255 (25[0-5])        Cualquiera de las anteriores cadenas termina con un punto (\\.), eso valida el octeto  La cadena tiene que tener 3 octetos con esas mismas reglas ({3})  El √∫ltimo octeto comprueba lo mismo que en el punto 2. A diferencia de los otros octetos, √©ste no termina con un punto.  Finalmente, si eso se cumple, se regresa un True, si no se regresa False.Nuevo intentoViendo las soluciones de la comunidad, not√© que el patr√≥n ([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.) se utiliza mucho, y creo que es la mejor forma de hacerlo. As√≠ que modifiqu√© la soluci√≥n de zimo, combinando sintaxis de mi anterior soluci√≥n, sin utilizar grep para hacer una oneliner que qued√≥ de esta forma:1o=\"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\" &amp;&amp; [[ $1 =~ ^(($o\\.){3}$o)$ ]] &amp;&amp; echo \"True\" || echo \"False\"Que incluso fue un poco m√°s corta que la propuesta original.Lo que aprend√≠En mi c√≥digo  Recordar un poco sobre regex.  Aplicar la sintaxis de soluciones externas vistas en el anterior KataEn el c√≥digo de zimo  Con un poco de ingenio se pueden crear patrones para capturar lo que se busca.",
            "date": "2023-06-25T00:00:00+00:00",
            "objectID": "http://localhost:4000/ip-validation/",
            "id": "http://localhost:4000/ip-validation/",
            "tags": ["programacion"],
            "title": "IP Validation",
            "uri": "/ip-validation/"
        },
        
        {
            "categories": ["programacion"],
            "content": "Prize DrawEnlace al kata: 5/5 üñ§  En este problema se nos pide encontrar el nombre ganador de un sorteo, como datos de entrada tenemos una lista de nombres, una lista de pesos y una posici√≥n que ser√° el nombre seleccionado. Para cada nombre tendremos que sumar el valor de todas sus letras, sumar la longitud del nombre y por √∫ltimo multiplicar por el peso que le corresponde de la lista, el resultado es un n√∫mero ganador para cada nombre. Con todos los n√∫meros ganadores obtenidos tendremos que ordenarlos de mayor a menor (si hay dos n√∫meros ganadores iguales se ordenar√° adem√°s alfab√©ticamente). Por √∫ltimo, devolveremos al nombre en la posici√≥n solicitada.InstruccionesInstrucciones traducidasPara participar en un sorteo cada quien da su nombre.Cada letra del nombre tiene un valor el cual es su posici√≥n en el alfabeto ingl√©s. A y a tienen una posici√≥n 1, B y b posici√≥n 2 y as√≠.La longitud del nombre se suma a la suma de esas posiciones, de ah√≠ un n√∫mero som.Un array de pesos aleatorios est√° ligado a los nombres y cada som es multiplicado por su correspondiente peso para obtener lo que llaman un n√∫mero ganador.Ejemplo12345names: \"COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH\"weights: [1, 4, 4, 5, 2, 1]PauL -&gt; som = longitud del nombre + 16 + 1 + 21 + 12 = 4 + 50 -&gt; 54El *peso* asociado con PauL es 2 as√≠ que el *n√∫mero ganador* de PauL es  54 * 2 = 108.Ahora se pueden ordenar los nombres en el orden decreciente de los n√∫meros ganadores. Cuando dos personas tienen el mismo n√∫mero ganador ord√©nalos alfab√©ticamente por sus nombres.Tareas  parametros: st una cadena de nombres, we un array de pesos, n una posici√≥n  regresar: el nombre del participante con la posici√≥n n (posiciones son numeradas a partir de 1)Ejemplo12345names: \"COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH\"weights: [1, 4, 4, 5, 2, 1]n: 4La funci√≥n debe regresar: \"PauL\"Notas  El array de pesos es por lo menos tan largo como la cantidad de nombres, puede ser m√°s largo.  Si st est√° vac√≠a, regresa ‚ÄúNo participants‚Äù.  Si n es m√°s grande que el n√∫mero de participantes, entonces regresa ‚ÄúNot enough participants‚Äù.Mi soluci√≥nEsta soluci√≥n la fui desarrollando en la marcha, pues realmente s√≥lo sab√≠a lo b√°sico sobre variables, condicionales, funciones y ciclos, pero sin recordar al cien por ciento la sint√°xis. Consult√© bastantes p√°ginas para saber c√≥mo se hac√≠a lo que ten√≠a en mente, lo que me daba errror y sobre como refactorizar mi c√≥digo.AlgoritmoC√≥digoC√≥digo con comentarios en espa√±ol123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#!/bin/bash# valida los datos de entradavalidate () {  if [[ -z $1 ]]; then    echo \"No participants\"      elif [[ $(echo $1 | tr \",\" \"\\n\" | wc -l) -lt $3 ]]; then    echo \"Not enough participants\"    else    rank $1 $2 $3      fi   }# procesa y ordena los nombresrank () {  # pasa a min√∫sculas los nombres  list=\"${1,,}\"  # separa nombres y pesos  IFS=\",\" read -ra names &lt;&lt;&lt; \"$list\"   IFS=\",\" read -ra wghts &lt;&lt;&lt; \"$2\"   # obtiene cada nombre  for i in $(seq 0 $(( ${#names[@]} -1 ))); do    name=\"${names[i]}\"    total=0\t# obtiene cada letra y su valor    for j in $(seq 0 $(( ${#name} -1 ))); do      #total=$((total + $(echo $abc | cut -d \"${name:j:1}\" -f 1 | wc -c)))  # calcula el total en una l√≠nea, pero se mantuvo dando Execution Timed Out            local value=$(charValue ${name:j:1})      total=$((total + value))          done\t# calcula los n√∫meros ganadores ((total + len) * weight)    w_num=$(( $((total + ${#name})) * ${wghts[i]} ))\t# cadena de nombres y n√∫meros ganadores    nms_wnum+=\"$name $w_num,\"      done            # ordena primero por el n√∫mero ganador y luego por nombre  sorted=$(echo $nms_wnum | tr \",\" \"\\n\" | sort -k 2,2nr -k 1,1 | tr \" \" \":\")  # obtiene el nombre de la posici√≥n deseada  name=$(echo $sorted | tr \" \" \"\\n\" | nl -s\" \" -w1 | grep -w \"$3\" | cut -d \":\" -f 1 | cut -d \" \" -f 2)  # devuelve el nombre con la primer letra en may√∫scula  echo ${name^}    }# obtiene los valores indivuduales de las letrascharValue () {  abc=\"abcdefghijklmnopqrstuvwxyz\"  # corta la cadena abc con el argumento dado  IFS=\"$1\" read -ra tmp &lt;&lt;&lt; \"$abc\"  # obtiene la longitud de la variable tmp  local value=$(( ${#tmp} +1 ))  echo $value  }validate \"$1\" \"$2\" \"$3\"Cuando finalic√© me sent√≠ como si hubiera escrito el c√≥digo para echar a andar un transbordador espacial, y aunque sab√≠a que seguramente hab√≠a soluciones mucho mejores, me gust√≥ el Kata porque fue mi primer reto real en bash.Otras solucionesSoluci√≥n propuesta por el usuario DEV0001. C√≥digo comentado por m√≠.12345678910111213141516171819202122232425262728293031#!/bin/bashrank () {  # separa los nombres y los pesos  IFS=\",\" read -r -a names &lt;&lt;&lt; \"$1\"  IFS=\",\" read -r -a weights &lt;&lt;&lt; \"$2\"  rank=\"$3\"  # hace las validaciones  [[ ${#names[@]} -eq 0 ]] &amp;&amp; echo \"No participants\" &amp;&amp; exit  [[ ${rank} -gt ${#names[@]} ]] &amp;&amp; echo \"Not enough participants\" &amp;&amp; exit  # recorre todos los nombres  for i in ${!names[@]}; do\t# obtiene la longitud del nombre    let res=${#names[$i]}\t# recorre los car√°cteres del nombre    for chr in $(echo \"${names[$i]}\" | tr [A-Z] [a-z] | grep . -o); do\t  # encuentra el valor del car√°cter      let res+=$(eval echo {a..${chr}} | tr \" \" \"\\n\" | wc -l)    done\t# obtiene el n√∫mero ganador    let res*=${weights[$i]}    # da la cadena con el n√∫mero ganador y el nombre    echo \"${res} ${names[$i]}\"  done \\    # termina el ciclo y manda la salida al comando sort, ordena por la primer y segunda columna y manda la salida a awk  # awk obtiene la posici√≥n deseada e imprime el nombre  | sort -k 1nr,2 | awk -v \"n=${rank}\" '(NR==n){print $2}'}rank \"$1\" \"$2\" \"$3\"Esta soluci√≥n es la m√°s corta y f√°cil de entender que encontr√©. Da soluci√≥n al problema de una forma elegante y ordenada.Lo que aprend√≠En mi c√≥digo  Diccionarios en bash  Separar cadenas  Ordenar m√∫ltiples columnas (originalmente me ayud√© de ChatGPT)  Mucha sint√°xisEn el c√≥digo de DEV0001  Se pueden utilizar s√≥lo corchetes dobles para validaciones o tests  awk es bastante √∫til para procesar cadenas  Algunas otras soluciones ingeniosas",
            "date": "2023-06-17T00:00:00+00:00",
            "objectID": "http://localhost:4000/prize-draw/",
            "id": "http://localhost:4000/prize-draw/",
            "tags": ["programacion"],
            "title": "Prize Draw",
            "uri": "/prize-draw/"
        },
        
        {
            "categories": ["redes"],
            "content": "La red m√°s simpleRed  Una red es un conjunto de computadoras que est√°n conectadas en un medio com√∫n y comparten informaci√≥n entre s√≠.La red m√°s grande que existe es internet, es una red a la que se conectan millones de dispositivos y que te permite ver esta p√°gina web. Pero dejando de lado internet, tambi√©n utilizas otras redes m√°s peque√±as en tu d√≠a a d√≠a, por ejemplo, cuando conectas tu smarthpone a una bocina o audifonos bluetooth, est√°s conect√°ndote a la red de ese dispositivo y por lo tanto puedes intercabiar informaci√≥n con √©l.Existen distintos tipos y topolog√≠as de redes, pero en este post vamos a ver la red m√°s simple utilizando el simulador Cisco Packet Tracer.Construcci√≥nAgregar los equiposPara esta red vamos a agregar 2 PCs o laptops al espacio l√≥gico.Conexi√≥nAhora conectaremos estos dos equipos utilizando el Cable de cable cruzado desde el puerto FastEthernet0 al mismo del otro equipo.Ya tenemos una red, sin embargo si probamos hacer env√≠ar una PDU simple de un equipo al otro, vamos diciendo que no hay puertos funcionales para el dispositivo. Esto pasa porque necesitamos agregar una direcci√≥n IP a cada equipo, de esa manera los dispositivos tendran una identificaci√≥n y el otro podr√° comunicarse con √©l.Agregar direcci√≥n IPPara agregar una direcci√≥n IP vamos a ingresar a la configuraci√≥n de IP como se muestra en la imagen:En la ventana que se nos abre vamos a llenar los siguientes campos:  IPv4 Address: 192.168.0.1  Subnet Mask: 255.255.255.0Y cerramos la ventana. Ahora podemos posar el cursor sobre la PC y veremos que ya tiene una direcci√≥n IP asignada.Ahora vamos a repetir el proceso con la laptop utilizando ahora la direcci√≥n IP 192.168.0.2 con la misma m√°scara de subred.Por √∫ltimo pondr√© en notas (presionando la tecla N) la direcci√≥n de los equipos.",
            "date": "2023-05-07T00:00:00+00:00",
            "objectID": "http://localhost:4000/la-red-mas-simple/",
            "id": "http://localhost:4000/la-red-mas-simple/",
            "tags": ["redes"],
            "title": "La red m√°s simple",
            "uri": "/la-red-mas-simple/"
        },
        
        {
            "categories": ["mr_robot"],
            "content": "Mr. Robot  Mr. Robot es drama centrado en Elliot, un hacker que trabaja en una mon√≥tona empresa de ciberseguridad. Sin embargo, todo cambia cuando es reclutado por un grupo de hackers que tienen como meta un objetivo simple: cambiar el sistema que gobierna al mundo.¬øPor qu√© te hablo de Mr. Robot?La serie est√° inspirada en t√©cnicas reales de hacking, no todo lo mostrado es cien por ciento apegado a la realidad, pero es una de las mejores representaciones de hacking en series y pel√≠culas que conozco.Por lo que, si est√°s empezando en el mundo de la ciberseguridad es una buena forma de tener un acercamiento al mundillo del hacking.Y a√∫n si ya tienes experiencia en el √°rea, si buscas una serie que te mantenga pegado al asiento y que te haga querer cambiar el sistema, Mr. Robot es lo mejor que te puedo recomendar. Adem√°s, ¬øpor qu√© no ver una de las series que tiene algunos de los cap√≠tulos mejores puntuados en IMDB?.¬øC√≥mo ver la serie?Dos pasos:  Ve un cap√≠tulo  Consulta el post del cap√≠tulo aqu√≠Tan simple como eso. Y es que como te coment√© arriba, muchas de las escenas en el show tienen bases reales, por lo que probablemente escuchar√°s t√©rminos de redes, hacking y sistemas de las que jam√°s hayas escuchado antes (no te preocupes, a m√≠ tambi√©n me pas√≥ la primera vez que lo vi). Por eso he estado haciendo res√∫menes y explicaciones de cada uno de los episodios de la serie, donde repaso las escenas importantes para que no te sientas perdido. Adem√°s es una buena forma de seguir aprendiendo.En cada post doy un resumen no tan exhaustivo, pero dejo enlaces en cada tema a v√≠deos, art√≠culos u otros posts para que si te interesa, profundices m√°s en el tema.",
            "date": "2023-05-05T00:00:00+00:00",
            "objectID": "http://localhost:4000/mr-robot/",
            "id": "http://localhost:4000/mr-robot/",
            "tags": ["mr_robot"],
            "title": "Mr. Robot",
            "uri": "/mr-robot/"
        },
        
        {
            "categories": ["maquina"],
            "content": "Pickle RickEnlace: https://tryhackme.com/room/picklerickInstrucciones:Este reto con tema de Rick y Morty requiere que explotes un servidor web para encontrar 3 ingredientes que ayudar√°n a Rick a hacer su poci√≥n para transformarse de nuevo en humano de su forma de pepinillo.Una vez que nos hayamos conectado a trav√©s de VPN a la m√°quina empezaremos con la fase de reconocimiento.ReconocimientonmapLo primero que haremos es ejecutar nmap para descubrir los puertos del sistema objetivo:1$ nmap -n -Pn &lt;ip&gt; Vemos que hay dos puertos abiertos, empezaremos por revisar el servidor web del puerto 80 (las instrucciones nos mencionaban un servidor web).Servidor webLa p√°gina principal nos da a entender que habr√° un login, pero al parecer tendremos que encontrar las credenciales por nuestra cuenta.Ver este servidor web me dio ganas de utilizar gobuster.gobusterVamos a enumerar los directorios web de este servidor con la wordlist /dirb/common.txt, quiz√° nos encontremos algo interesante.1$ gobuster dir -w /usr/share/wordlists/dirb/common.txt -u http://&lt;ip&gt;Los p√°ginas disponibles (status: 200) son:  index.html  robots.txt  login.phpEfectivamente hay un login, pero a√∫n necesitamos un usuario y contrase√±a, tal vez el contenido de robots.txt sea una de las dos:No nos quedan m√°s p√°ginas para analizar, pero tal vez revisando el c√≥digo fuente nos sea √∫til, veamos el de login.php:Podemos ver que Rick utiliz√≥ un comentario para guardar su usuario, por lo tanto, el texto que encontramos en robots.txt puede que sea nuestra contrase√±a, intentemos con eso.Ataque¬°Encontramos las credenciales del login! Ahora parece que tenmos acceso a una web shell, si introducimos pwd nos regresa:Por lo tanto, podemos utilizar este formulario para navegar por el sistema y encontrar los ingredientes necesarios. Hay que tener en cuenta que si utilizamos cd, no habr√° un efecto en nuestra ruta actual, por lo que usaremos rutas absolutas.Primer ingredienteSi hacemos un ls, vemos los archivos que est√°n en el directorio del servidor web, y hay uno sospechoso con nombre Sup3rS3cretPicl3Ingred.txt. Veamos qu√© contiene.Al parecer cat, less, head y otros comandos est√°n siendo bloqueados en esta web shell, as√≠ que usaremos nl para ver el contenido.As√≠ que, aqu√≠ tenemos el primero, veamos d√≥nde est√°n los otros. El archivo clue.txt nos dice que busquemos en todo el sistema, as√≠ que revisemos los directorios home.Segundo ingredienteEl directorio /home/rick contiene un archivo llamado second ingredients, vaya, vaya‚Ä¶S√≥lo nos falta uno, sigamos.",
            "date": "2023-04-16T00:00:00+00:00",
            "objectID": "http://localhost:4000/pickle-rick/",
            "id": "http://localhost:4000/pickle-rick/",
            "tags": ["maquina"],
            "title": "Pickle Rick",
            "uri": "/pickle-rick/"
        },
        
        {
            "categories": ["cheatsheet"],
            "content": "MariaDBBase de datos            Acci√≥n      Comando                  Crear      CREATE DATABASE nombre_db;              Eliminar      DROP DATABASE nombre_db;              Listar      SHOW DATABASES;      Tablas            Acci√≥n      Comando      Descripci√≥n                  Crear tabla      CREATE TABLE nombre_tabla(columna1 INT(5) AUTO_INCREMENT PRIMARY KEY NOT NULL, columna2 VARCHAR(20) NOT NULL DEFAULT \"x\", columna3 DATE);      Crea una tabla con tres columnas con sus respectivos tipos de datos              Eliminar tabla      DROP TABLE nombre_tabla;      Elimina la tabla especificada              Listar      SHOW TABLES;      Lista todas las tablas de la base de datos      Modificar            Acci√≥n      Comando      Descripci√≥n                  Agregar columna      ALTER TABLE nombre_tabla ADD COLUMN nueva_columna DECIMAL(6,2) NOT NULL AFTER columna2;      Agrega una nueva columna especificando su tipo de dato despu√©s de cierta columna              Cambiar tipo de columna      ALTER TABLE nombre_tabla MODIFY columna VARCHAR(20) NOT NULL UNIQUE;      Altera el tipo de dato que almacena la columna              Cambiar nombre de columna      ALTER TABLE nombre_tabla CHANGE COLUMN nombre nuevo_nombre DECIMAL(6,2) NOT NULL;      Cambia el nombre de una columna a la vez que se especifica su tipo de dato      Llaves            Acci√≥n      Comando      Descripci√≥n                  Agregar PK      ALTER TABLE nombre_tabla ADD PRIMARY KEY(columna);      Establece como llave primaria una columna de la tabla              Eliminar PK      ALTER TABLE nombre_tabla DROP PRIMARY KEY;      Elimina la llave primaria de una tabla              Agregar FK      ALTER TABLE nombre_tabla ADD CONSTRAINT FOREIGN KEY(columna) REFERENCES tabla2(col_pk);      Establece una llave for√°nea que referencia a la llave primaria de otra tabla              Eliminar FK      ALTER TABLE nombre_tabla DROP FOREIGN KEY col_fk;      Elimina la llave for√°nea de una columna      RegistrosMostrar            Acci√≥n      Comando      Descripci√≥n                  Mostrar todos      SELECT * FROM nombre_tabla;      Muestra todos los registros de la tabla especificada              Mostrar algunas columnas      SELECT col1, col2, col3 FROM nombre_tabla;      Muestra todos los registros de las columnas especificadas              Filtrar      SELECT * FROM nombre_tabla WHERE columna = \"xxx\";      Muestra los registros donde columna tenga valor xxx              Ordenar      SELECT col1, col2 FROM nombre_tabla ORDER BY col2 ASC LIMIT 0,20;      Muestra los 20 registros de las columnas especificadas, ordenando en formato ascendente la columna 2              Agrupar      SELECT * FROM nombre_tabla GROUP BY columna;      Muestra los registros agrupados por la columna especificada      Actualizar y borrar            Acci√≥n      Comando      Descripci√≥n                  Actualizar      UPDATE nombre_tabla SET col1 = \"xxx\" col2 = \"yyy\", WHERE col3 = \"zzz\";      Actualiza los registros que coincidan con la cl√°usula WHERE, si no se utiliza WHERE se actualizar√° toda la tabla              Borrar      DELETE FROM nombre_tabla WHERE identifier = \"xxx\";      Borra los registros que coincidan con la condici√≥n, al igual que UPDATE si no se usa WHERE se eliminar√°n todos los registros de la tabla      Importar / ExportarLos siguientes comandos se ejecutan desde la terminal del usuario.            Acci√≥n      Comando      Descripci√≥n                  Importar      mariadb -u usuario -p nombre_bd &lt; script.mysql      Importa el contenido del script en la bd especificada              Exportar      mysqldump -u usuario -p nombre_bd &gt; bd.mysql      Exporta el contenido de una bd a un script      ",
            "date": "2023-04-14T00:00:00+00:00",
            "objectID": "http://localhost:4000/sql-cheatsheet/",
            "id": "http://localhost:4000/sql-cheatsheet/",
            "tags": ["cheatsheet"],
            "title": "Cheatsheet de MariaDB",
            "uri": "/sql-cheatsheet/"
        },
        
        {
            "categories": ["[&quot;cheatsheet&quot;, &quot;linux&quot;]"],
            "content": "Comandos en LinuxSintaxis general de los comandos en Linux:123$ comando -opcion argumentos$ ls -la /etc/  # ejemplo $ ls /etc/ -la  # tambien es posible. menos comunBuscar archivos            Descripci√≥n      Comando                  Busca un archivo en todo el sistema, propiedad del usuario usuario7 y del grupo grupo6 con tama√±o de 33 bytes      find / -type f -size 33c -user usuario7 -group grupo6 2&gt;/dev/null              Busca un archivo en el directorio actual, sin permisos de ejecuci√≥n, con tama√±o de 1033 bytes y muestra su contenido      find ./ -type f ! -executable -size 1033c -exec cat {} \\;      Manipulaci√≥n de textoCambiar posici√≥n de caract√©res            Descripci√≥n      Comando                  Rota los caract√©res 13 posiciones (cifra Caesar)      cat &lt;file&gt; | tr [a-mn-zA-MN-Z] [n-za-mN-ZA-M]      Eliminar palabras            Descripci√≥n      Comando                  Elimina palabras de menos de x caract√©res      sed -r '/^.{,&lt;x&gt;}$/d' &lt;archivo&gt;              Elimina palabras sin caract√©res especiales      sed -r '/[!-/:-@\\[-\\{-~]+/!d' &lt;archivo&gt;              Elimina palabras sin n√∫meros      sed -ri '/[0-9]+/!d' &lt;archivo&gt;      Administraci√≥n de usuarios y gruposLos siguientes comandos se ejecutan con sudo o con usuario root.Usuarios            Acci√≥n      Comando      Descripci√≥n                  Crear      useradd -m -shell &lt;/ruta/ala/shell&gt; &lt;nombre&gt;      Crea un nuevo usuario con su directorio home y se especifica su shell por default              Cambiar contrase√±a      passwd &lt;usuario&gt;      Cambia/establece la contrase√±a para el usuario especificado              Eliminar      userdel &lt;usuario&gt;      Elimina el usuario especificado      Grupos            Acci√≥n      Comando      Descripci√≥n                  Crear      groupadd &lt;nombre&gt;      Crea un grupo con el nombre especificado              Agregar usuarios      usermod -aG &lt;grupo&gt; &lt;usuario&gt;      Agrega el usuario al grupo especificado      iptablesLos siguientes comandos se ejecutan con sudo o con usuario root.Filter Table            Acci√≥n      Comando      Descripci√≥n                  Pol√≠tica de entrada      iptables --policy INPUT &lt;ACCEPT/DROP&gt;      Establece la pol√≠tica de entrada a aceptar/rechazar              Filtrar por ip      iptables -I INPUT -s &lt;ip&gt; -j DROP      Rechaza la conexi√≥n proveniente de la ip especificada              ¬†      iptables -I OUTPUT -d &lt;ip&gt; -j DROP      Rechaza las conexiones a la ip especificada              Filtrar por puerto      iptables -I INPUT -p tcp --dport 80 -j DROP      Rechaza las conexiones tcp al puerto 80              Listar cadenas      iptables -L --line-numbers      Lista las cadenas con numeraci√≥n              Eliminar cadena      iptables -D INPUT &lt;n&gt;      Elimina la cadena especificada      ",
            "date": "2023-04-14T00:00:00+00:00",
            "objectID": "http://localhost:4000/linux-cheatsheet/",
            "id": "http://localhost:4000/linux-cheatsheet/",
            "tags": ["[&quot;cheatsheet&quot;, &quot;linux&quot;]"],
            "title": "Cheatsheet de Linux",
            "uri": "/linux-cheatsheet/"
        },
        
        {
            "categories": ["mr_robot"],
            "content": "Hello FriendEl caf√© de RonConexi√≥n de fibra √≥pticaEsta escena es una de mis favoritas, Elliot est√° en El Caf√© de Ron, entra Ron, el due√±o del local, y Elliot lo confronta. Primero le dice que la raz√≥n que va ah√≠ es porque el Wi-Fi es r√°pido, tiene conexi√≥n de fibra √≥ptica con velocidades gigabit.En el presente muchas de nuestras casas ya cuentan con conexi√≥n de fibra √≥ptica, pero para el a√±o en el que sali√≥ la serie (2015), la fibra √≥ptica a√∫n era una novedad. Justo esto fue lo que le pareci√≥ extra√±o a Elliot, por lo que procedi√≥ a interceptar el tr√°fico de la red.Interceptar el tr√°fico de la redLa serie no dice con qu√© herramienta Elliot hizo esto, pero algunas de las herramientas que se pueden usar para este fin son wireshark y tcpdump. Este proceso consiste en estar conectado a una red y con una de las herramientas mencionadas empezar a escuchar las comunicaciones que viajan por esa red. Es como si estando en un parque te enfocas en las dos personas que est√°n sentadas conversando y agudizas tu o√≠do para captar todo lo que est√°n diciendo.Interceptar/escuchar el tr√°fico de una red nos da la oportunidad de verificar que la red est√° en buenas condiciones, notar tr√°fico inusual o, incluso, espiar.A continuaci√≥n, Elliot dice que decidi√≥ hackear a Ron, no se especifica qu√© hizo exactamente, pero es probable que con el an√°lisis del tr√°fico de la red diera con el sitio que Ron estaba operando, Los chicos de Plato, ingresara (de alguna forma) como administrador y copiara todo el contenido del sitio como evidencia, incluso los correos.ServidoresUn servidor es una computadora dedicada a proveer recursos a otras computadoras. El tipo de servidor que se menciona aqu√≠ es un servidor web, el cual provee el contenido de Los chicos de Plato. Si el servidor es cerrado y borrado, este sitio y todo su contenido dejan de existir.La raz√≥n de que Elliot haya confrontado a Ron es porque si lo hac√≠a de manera remota, hab√≠a la posibilidad que Ron huyera y cerrara los servidores de su sitio.Red TorTor es una red que funciona de forma especial: est√° enfocada a anonimizar a sus usuarios. Quienes se conectan a esta red quieren dificultar el proceso de ser identificados. La red Tor utiliza el protocolo onion para lograr enmascarar a sus usuarios.Protocolo onionEste protocolo trabaja por capas (por eso el onion), con estas capas logra ofuscar la identificaci√≥n de los usuarios y encriptar sus comunicaciones.Pese a todo esto, como Elliot dice: la red Tor no es tan an√≥nima como crees. Vamos, no es una herramienta m√°gica que te hace invisible, a√∫n en su dise√±o tiene algunos puntos d√©biles. Si alguien analiza el tama√±o de los mensajes y la frecuencia de la comunicaci√≥n entre el usuario y en nodo de entrada, y aparte tiene acceso al nodo de salida, donde las comunicaciones ya no est√°n encriptadas por la red Tor, es posible conocer el tr√°fico del usuario (justo lo que conoc√≠a Elliot).En resumen‚Ä¶Resumiendo lo que Elliot hizo en esta escena:  Le gustaba la velocidad de la red del caf√©  Not√≥ tr√°fico raro  Captur√≥ y analiz√≥ el tr√°fico de la red  Encontr√≥ el nodo de salida de la red Tor y descubri√≥ sus servidores de Ron  Ingres√≥ a los servidores de Los chicos de Plato  Descarg√≥ todo su contenido y correos  Hizo una denuncia y confront√≥ a Ron en lo que llegaba el FBIAllsafeLog fileLos log files son archivos en lo que se lleva un registro de todas las acciones realizadas en un sistema. Este tipo de archivos son muy importantes para los administradores del sistema porque cuando ocurre un ataque o una brecha de seguridad, analizar los log files puede dar pistas de c√≥mo ocurri√≥ dicho ataque.Mirando el log file del servidor Elliot pudo determinar que el ataque que sufrieron fue un ataque RUDY.RUDY attackR U Dead Yet? (¬øya est√°s muerto?) es un ataque de tipo DoS (abajo explicado), el cual explota servidores que reciben informaci√≥n de formularios a trav√©s de enviar respuestas muy largas de forma muy lenta. El servidor tiene que esperar a que llegue toda la respuesta, por lo que estar√° siendo realentizado y no podr√° atender a otros usuarios de forma efectiva. Es como si al pagar en la caja del supermercado la cuenta fuera de $1,000, y t√∫ ingresaras una moneda de $1 cada diez segundos.Ataque DoSLos ataques de Denegaci√≥n de Servicio (Denial of Service) son ataques que son muy comunes en la actualidad. Su prop√≥sito principal es impactar negativamente en el desempe√±o de un servidor para hacerlo lento, impedir que usuarios leg√≠timos accedan a √©l y, en casos extremos, dejarlo inoperativo.El ataque RUDY es un ejemplo de ataque DoS porque su meta es ocupar al servidor con peticiones lentas e inutiles, sin embargo hay m√°s formas de ataques DoS, uno de los m√°s comunes es el DDoS.La oficina de KrystaAtaque de fuerza brutaCuando conocemos por primera vez a Krysta sabemos que Elliot tiene acceso a sus cuentas de redes sociales y de correo, ¬øc√≥mo logr√≥ esto? Pues, al parecer utiliz√≥ una herramienta para hacerle fuerza bruta a sus cuentas. De hecho, en otras escenas podemos ver que se llama elpscrk (¬øelliot-password-crack?) y la utiliza para obtener las contrase√±as de Ollie y del novio de Krysta. √âste m√©todo de obtener contrase√±as es conocido como ataque de fuerza bruta y consiste en probar miles e incluso millones de posibilidades hasta encontrar la correcta.Esta herramienta funciona recibiendo una lista de palabras (wordlist), que son las posibles contrase√±as para el usuario de Krysta, la wordlist que utiliza Elliot contiene 9,875,894 posibles contrase√±as, la contrase√±a correcta la encuentra en 24 segundos.En la actualidad este ataque ya no es tan f√°cil de hacer para sitios online, porque los firewalls detectan el ataque y lo bloquean, sin embargo a√∫n es √∫til con distintos enfoques. Y tambi√©n agregar que, en la vida real este tipo de ataques requieren de un gran poder de procesamiento y generalmente toman horas en llevarse a cabo.WordlistUna wordlist consiste en una lista de posibles credenciales (generalmente) con las que se intentar√° probar acceder a un sistema. Estas wordlists se pueden encontrar en l√≠nea recopiladas de bases de datos filtradas en el pasado como las SecLists, pero tambi√©n se pueden crear especialmente para un objetivo, como lo hace Elliot para el novio de Krysta. Para ello hay que conocer ciertos datos de nuestro objetivo y con herramientas como hydra se pueden generar permutaciones de estas palabras, obteniendo una wordlist gigantesca si es necesario.Ejecutivos de E-CorpLinuxCuando los ejecutivos de E-Corp visitan Allsafe, Tyrell Wellick le dice a Elliot que al igual que √©l, tambi√©n utiliza Linux. Y como Linux es generalmente utilizado por personas con un conocimiento m√°s avanzado, es sorpresa para Elliot.Linux es un sistema opertativo que a diferencia de Windows es de c√≥digo abierto y gratuito, esto lo hace altamente configurable y adaptable, por ello existen muchas variaciones de Linux. Kali Linux y Parrot OS son dos versiones de este sistema operativo y est√°n pensado espec√≠ficamente para hacking y pentesting. De hecho, en la serie Elliot utiliza Kali para sus ataques.Gnome y KDETambi√©n Wellick menciona Gnome y KDE, √©stos son dos entornos de escritorio muy populares en Linux, b√°sicamente lo que hacen es darle una apariencia com√∫n a las ventanas, √≠conos y m√°s en el sistema operativo. Wellick es m√°s de KDE y, a decir verdad, yo tambi√©n.            Ventanas de Gnome      Ventanas de KDE                              Ataque a AllsafeAtaque DDoSLos ataques DoS son efectivos pero tambi√©n son f√°ciles de detectar y bloquear por los firewalls de los servidores, si se detectan patrones de denegaci√≥n de servicio proviniendo de una cierta direcci√≥n IP, se bloquea esa direcci√≥n y problema solucionado.Por este motivo los atacantes han ideado ataques m√°s complejos y m√°s efectivos. El Distributed Denial of Service (Denegaci√≥n de Servicio Distribuido) es la evoluci√≥n de DoS. Con este ataque se utilizan miles o millones de dispositivos para hacer peticiones a servidores, saturandolos con tanto tr√°fico. De esta forma un firewall ya no es tan efectivo para diferenciar entre un atacante y un usuario leg√≠timo que trata de utilizar el servidor.Para conocer m√°s sobre los ataques DDoS y ver un caso real, mira el siguiente v√≠deo.La versi√≥n  DDoS attack          Reconfigure DNS      Reboot the servers      They are inside the network      Security protocols      Load sharing      Redirect traffic        Rootkit          Serverfarm      Backup server      Autoswitch      Switch DNS      ",
            "date": "2023-04-12T00:00:00+00:00",
            "objectID": "http://localhost:4000/1x1-hello-friend/",
            "id": "http://localhost:4000/1x1-hello-friend/",
            "tags": ["mr_robot"],
            "title": "1x1 Hello Friend",
            "uri": "/1x1-hello-friend/"
        }
        
    ]






